@inject EchoChatApiServiceClient _echoAPI
@inject EchoChatPushNotificationServiceClient _client
@inject ILocalStorageService LocalStorage
@inject IUserContainer SessionRepository
@implements IDisposable
@*
    Layout for the user profile section that exists within the chatviewcomponent if it is a private chat between two users.

    This component shows the other member of the private chat displaying their name,
    userhandle, image, mutual friends, echocreationdate, status, personal note, and collapsed lists of both mutual servers and mutual friends.

    Expanding the mutual server list or mutual friend lists within this component allows the user to click a specific server or friend allowing direct navigation.
*@

<div style="display: @(Visible ? "block" : "none");">
    <MudPaper Width="20vw" Height="92vh" Class="ma-0 pa-0" Square Style="background: var(--mud-palette-dark);" Elevation="0">
         @if (Member != null)
        {
            <MudPaper Style="@($"background: {(Member.Profile.BannerColour != null ? Member.Profile.BannerColour : "#5C23D9")};")" Height="150px">
                <div>
                    <MudAvatar Style="height:80px; width:80px; position:relative; top:110px; left:15px; border:solid 2px var(--mud-palette-dark);">
                        <MudImage Src="@Member.ImageIconURL" />
                    </MudAvatar>
                </div>
            </MudPaper>
            <MudPaper Style="background: var(--mud-palette-dark);" Height="50px" />
            <div style="padding-left: 15px;">
                <MudPaper Class="my-2" Elevation=0 Style="@($"background:{Colors.Shades.Transparent}")">
                    <h4>@Member.DisplayName</h4>
                    <p>@Member.Profile.User.Name.ToLower()</p>
                </MudPaper>
                <MudDivider />
                <MudPaper Class="my-2" Elevation=0 Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudText Typo="Typo.button" style="margin-top: 10px;">Echo Member since</MudText>
                    <MudText Typo="Typo.body1">@DateTime.Now.AddDays(-13).AddMinutes(23).ToString("dd MMMM yyyy")</MudText>  <!-- CreationDate is missing? -->
                    </MudPaper>
                    <MudDivider />
                    <MudPaper Class="my-2" Elevation=0 Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudText Typo="Typo.button" style="margin-top: 10px;">Note</MudText>
                        @if (Editable)
                    {
                        <MudTextField FullWidth T="string" InputType="InputType.Text" @onfocusout="(()=> Editable = false)" Margin="Margin.Dense" Variant="Variant.Filled"
                                       Placeholder="@(Member.Profile.Note != "" ? Member.Profile.Note : "Click to add a note")" @bind-Value="@noteText" Text="@noteText" TextChanged="NoteChangedAsync"
                            Class="px-5 py-2" Immediate="false" MaxLength="255" TextUpdateSuppression="false" Style="background: var(--mud-palette-dark);opacity:1;" />
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" @onclick="(()=> Editable = true)">@(String.IsNullOrEmpty(Member.Profile.Note) ? "Click here to add note" : Member.Profile.Note)</MudText>
                    }
                </MudPaper>
            </div>
        }
    </MudPaper>
</div>
@code {
    [Parameter]
    public bool Visible { get; set; }

    public bool Editable { get; set; } = false;

    [Parameter]
    public MemberDTO Member { get; set; }
    public string noteText { get; set; } = "";

    public async void NoteChangedAsync()
    {
        Console.WriteLine(noteText);
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        if (!string.IsNullOrWhiteSpace(token))
        {

            var note = new SetNoteUserRequestDTO() { Note = noteText };
            var result = await _echoAPI.SetNoteAsync(token, Member.Id, note);
            if (result)
            {
                Console.WriteLine("Note changed");
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    public void Dispose()
    {
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }
    private async void SessionRepository_SessionChangeOccured()
    {
        await InvokeAsync(StateHasChanged);
    }
}

