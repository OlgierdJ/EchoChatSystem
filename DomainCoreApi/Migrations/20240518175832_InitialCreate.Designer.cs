// <auto-generated />
using System;
using DomainCoreApi.EFCORE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DomainCoreApi.Migrations
{
    [DbContext(typeof(EchoDbContext))]
    [Migration("20240518175832_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BugReportBugReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("BugReportBugReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte>("ActivityStatusId")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("CustomStatusId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("TimeLastLogon")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("CustomStatusId")
                        .IsUnique()
                        .HasFilter("[CustomStatusId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IconColor")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AccountActivityStatus");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "",
                            Icon = "Icons.Material.Filled.Circle",
                            IconColor = "Success",
                            Name = "Online"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "",
                            Icon = "Icons.Material.Filled.Brightness2",
                            IconColor = "Warning",
                            Name = "Away"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "You will not receive any desktop notifications.",
                            Icon = "Icons.Material.Filled.RemoveCircle",
                            IconColor = "Error",
                            Name = "Busy"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "",
                            Icon = "Icons.Material.Filled.StopCircle",
                            IconColor = "Dark",
                            Name = "Offline"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "You will not appear online, but have full access to all of Echo.",
                            Icon = "Icons.Material.Filled.StopCircle",
                            IconColor = "Dark",
                            Name = "Invisible"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountBlock", b =>
                {
                    b.Property<decimal>("BlockerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("BlockedId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("BlockerId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("AccountBlock");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountConnection", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AuthorizeClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizeCodeChallenge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizeResponseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizeState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalRefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalRefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ConnectionId");

                    b.ToTable("AccountConnection");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("CustomMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountCustomStatus");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNickname", b =>
                {
                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("AuthorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountNickname");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNote", b =>
                {
                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("AuthorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountNote");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("About")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AvatarFileURL")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BannerColor")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AccountProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountRole", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("RoleId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerMute", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("SubjectId", "MuterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MuterId");

                    b.ToTable("AccountServerMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerTextChannelMute", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("SubjectId", "MuterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MuterId");

                    b.ToTable("AccountServerTextChannelMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerVoiceChannelMute", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("SubjectId", "MuterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MuterId");

                    b.ToTable("AccountServerVoiceChannelMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSession", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TimeStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeStopped")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountSession");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSoundboardMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountSoundboardMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountVideoMute", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("SubjectId", "MuterId");

                    b.HasIndex("MuterId");

                    b.ToTable("AccountVideoMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IssuerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountViolation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ViolationId")
                        .IsUnique();

                    b.ToTable("AccountViolationAppeal");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AppealId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<decimal>("ReviewerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AppealId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.ToTable("AccountViolationAppealReview");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcceptedCurrency");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ApplicationKeybind", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApplicationKeybind");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Keybind", b =>
                {
                    b.Property<decimal>("KeybindSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("ApplicationKeybindId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KeybindSettingsId", "ApplicationKeybindId");

                    b.HasIndex("Action")
                        .IsUnique()
                        .HasFilter("[Action] IS NOT NULL");

                    b.HasIndex("ApplicationKeybindId");

                    b.ToTable("Keybind");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Permission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.RolePermission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AccessibilitySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowTextToSpeech")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysUnderlineLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplySaturationToCustomColors")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoPlayGIFsOnAppFocus")
                        .HasColumnType("bit");

                    b.Property<bool>("PlayAnimatedEmojis")
                        .HasColumnType("bit");

                    b.Property<bool>("ReducedMotion")
                        .HasColumnType("bit");

                    b.Property<int>("RoleColorMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("SaturationPercent")
                        .HasMaxLength(100)
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowSendMessageButton")
                        .HasColumnType("bit");

                    b.Property<int>("StickerAnimationMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("SyncContrastSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("SyncProfileThemes")
                        .HasColumnType("bit");

                    b.Property<bool>("SyncReducedMotionWithPC")
                        .HasColumnType("bit");

                    b.Property<byte>("TextToSpeechRate")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)4);

                    b.Property<bool>("UseLegacyChatInput")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AccessibilitySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ActivitySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowFriendsToJoinGame")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowVoiceChannelParticipantsToJoinGame")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayCurrentActivityAsAStatusMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareActivityStatusOnLargeServerJoin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ActivitySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AdvancedSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutoNavigateServerHome")
                        .HasColumnType("bit");

                    b.Property<bool>("DeveloperMode")
                        .HasColumnType("bit");

                    b.Property<bool>("UseHardwareAccelerationToMakeEchoSmoother")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AdvancedSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AppearanceSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("DarkSideBar")
                        .HasColumnType("bit");

                    b.Property<string>("InAppIcon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("MessageDisplayMode")
                        .HasColumnType("int");

                    b.Property<byte>("PixelChatFontScale")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PixelSpaceBetweenMessageGroupsScale")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowAvatarsInCompactMode")
                        .HasColumnType("bit");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ZoomLevel")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("AppearanceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ChatSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutoConvertEmoticonsToEmojis")
                        .HasColumnType("bit");

                    b.Property<int>("ContentSpoilerMode")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayDirectVideosAndImagesUploads")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayVideosAndImagesFromLink")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableStickerSuggestions")
                        .HasColumnType("bit");

                    b.Property<bool>("LoadImageDescriptionsWithImages")
                        .HasColumnType("bit");

                    b.Property<bool>("OpenThreadsInSplitView")
                        .HasColumnType("bit");

                    b.Property<bool>("PreviewEmbedsAndWebsiteLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("PreviewEmojisAndMarkdownWhilstTyping")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowEmoteReactionsOnMessages")
                        .HasColumnType("bit");

                    b.Property<bool>("StickersInAutocomplete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ChatSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.FriendRequestSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Everyone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("FriendsOfFriends")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ServerMembers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("FriendRequestSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.GameOverlaySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("AvatarSizeMode")
                        .HasColumnType("int");

                    b.Property<int>("DisplayNamesMode")
                        .HasColumnType("int");

                    b.Property<int>("DisplayUsersMode")
                        .HasColumnType("int");

                    b.Property<bool>("EnableGameOverlay")
                        .HasColumnType("bit");

                    b.Property<int>("OverlayNotificationsPlacement")
                        .HasColumnType("int");

                    b.Property<bool>("ShowTextChatNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("ToggleOverlayLockKeybind")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Shift + L");

                    b.HasKey("Id");

                    b.ToTable("GameOverlaySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("KeybindSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.NotificationSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowActivityEndNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowActivityStartNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowActivityUserJoinNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowActivityUserLeaveNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDeafenNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowIncomingRingNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowInvitedToSpeakNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMessageNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMuteNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOutgoingRingNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPTTActivateNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPTTDeactivateNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStreamStartedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStreamStoppedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUndeafenNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUnmuteNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserJoinNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserLeaveNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserMovedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowViewerJoinNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowViewerLeaveNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowVoiceDisconnectedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableAllNotificationSounds")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableDesktopNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSameChannelNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableTaskbarFlashing")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableUnreadMessageBadge")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusModeEnabled")
                        .HasColumnType("bit");

                    b.Property<byte>("PushNotificationInactiveTimeoutInMinutes")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ReceiveAnnouncementAndUpdateEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveCommunicationEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveRecommendationEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveSocialEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveTipEmails")
                        .HasColumnType("bit");

                    b.Property<int>("TextToSpeechNotificationMode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.PrivacySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("DMFromFriends")
                        .HasColumnType("int");

                    b.Property<int>("DMFromServerChatroom")
                        .HasColumnType("int");

                    b.Property<int>("DMFromUnknownUsers")
                        .HasColumnType("int");

                    b.Property<int>("DMSpamFilter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.SoundboardSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("SoundboardVolume")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("SoundboardSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.StreamerModeSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutomaticallyEnableAndDisableIfStreaming")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableSounds")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableStreamerMode")
                        .HasColumnType("bit");

                    b.Property<bool>("HideEchoWindowFromScreenCapture")
                        .HasColumnType("bit");

                    b.Property<bool>("HideInviteLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("HidePersonalInformation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StreamerModeSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VideoSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AlwaysPreviewVideo")
                        .HasColumnType("bit");

                    b.Property<string>("CameraDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableForceQualityOfServicePacketPrio")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableHardwareAccelerationForVideo")
                        .HasColumnType("bit");

                    b.Property<bool>("UseDDLInjectionToCaptureScreen")
                        .HasColumnType("bit");

                    b.Property<bool>("UseOpenH264VideoCodec")
                        .HasColumnType("bit");

                    b.Property<string>("VideoBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VideoSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VoiceSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AdvancedVoiceActivity")
                        .HasColumnType("bit");

                    b.Property<byte>("Attenuation")
                        .HasColumnType("tinyint");

                    b.Property<int>("AudioSubSystemMode")
                        .HasColumnType("int");

                    b.Property<bool>("AutomaticGainControl")
                        .HasColumnType("bit");

                    b.Property<bool>("AutomaticallyDetermineInputSensitivity")
                        .HasColumnType("bit");

                    b.Property<bool>("DeafenSelf")
                        .HasColumnType("bit");

                    b.Property<bool>("EchoCancellation")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableDiagnosticAudioRecording")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableVoiceDebugLogging")
                        .HasColumnType("bit");

                    b.Property<string>("InputDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputMode")
                        .HasColumnType("int");

                    b.Property<byte>("InputSensitivity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("InputVolume")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LowerVolumeOfOtherApplicationsWhenISpeak")
                        .HasColumnType("bit");

                    b.Property<bool>("LowerVolumeOfOtherApplicationsWhenOthersSpeak")
                        .HasColumnType("bit");

                    b.Property<bool>("MuteSelf")
                        .HasColumnType("bit");

                    b.Property<int>("NoiseSuppression")
                        .HasColumnType("int");

                    b.Property<string>("OutputDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("OutputVolume")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowWarningWhenNoMicInputDetected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("VoiceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("BillingInformation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("AgreeToEchosWithdrawalRight")
                        .HasColumnType("bit");

                    b.Property<decimal>("BillingInformationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<double>("MyCostEUR")
                        .HasColumnType("float");

                    b.Property<decimal>("SubscriptionPlanId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("TimeCancelled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSubscribed")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillingInformationId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionActivePeriod", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubcriptionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("TimePaused")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransactionGroupId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SubcriptionId");

                    b.HasIndex("TransactionGroupId");

                    b.ToTable("SubscriptionActivePeriod");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<double>("CostEUR")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SubscriptionPlan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlanActivePeriod", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("IsTemporarilyDisabled")
                        .HasColumnType("bit");

                    b.Property<double?>("PercentageSale")
                        .HasColumnType("float");

                    b.Property<decimal>("SubscriptionPlanId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeStarts")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeStops")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("SubscriptionPlanActivePeriod");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransaction", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double>("ChargedAmount")
                        .HasColumnType("float");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubscriptionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimePaid")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransactionGroupId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TransactionGroupId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("SubscriptionTransaction");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Fulfilled")
                        .HasColumnType("bit");

                    b.Property<double>("ToBePaidAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("SubscriptionTransactionGroup");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionRefund", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeRefunded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTransactionRefund");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Theme");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Dark"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Light"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.Chat", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatAccountMessageTracker", b =>
                {
                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CoOwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OwnerId", "CoOwnerId");

                    b.HasIndex("CoOwnerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatAccountMessageTracker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatInvite", b =>
                {
                    b.Property<string>("InviteCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InviterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("TotalUses")
                        .HasColumnType("int");

                    b.HasKey("InviteCode");

                    b.HasIndex("InviterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatInvite");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageHolderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MessageHolderId");

                    b.HasIndex("ParentId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ChatMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", b =>
                {
                    b.Property<decimal>("PinboardId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("PinboardId", "MessageId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("ChatMessagePin");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ChatId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatParticipancy", b =>
                {
                    b.Property<decimal>("ParticipantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ParticipantId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatParticipancy");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("ChatPinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.Connection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthenticationEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizeEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeReturnEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenCheckEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenRefreshEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Connection");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendSuggestion", b =>
                {
                    b.Property<decimal>("ReceiverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SuggestionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeSuggested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ReceiverId", "SuggestionId");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("ReceiverId", "SuggestionId")
                        .IsUnique();

                    b.ToTable("FriendSuggestion");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.Friendship", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendshipParticipancy", b =>
                {
                    b.Property<decimal>("ParticipantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ParticipantId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("FriendshipParticipancy");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("ReceiverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SenderRequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderRequestId")
                        .IsUnique();

                    b.ToTable("IncomingFriendRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("SenderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("OutgoingFriendRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.PaymentMethod", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("BillingInformationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDefaultPaymentMethod")
                        .HasColumnType("bit");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillingInformationId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("BugReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BugReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("CustomStatusReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomStatusReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CustomMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ReportedCustomStatus");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("FeedbackReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("MessageReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ReportedMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ReportedMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("ProfileReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfileReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AvatarFileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ReportedProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerChannelCategory");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberPermission", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelCategoryId", "AccountId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("AccountId", "ChannelCategoryId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerChannelCategoryMemberPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", b =>
                {
                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("AccountId", "ChannelCategoryId");

                    b.HasIndex("ChannelCategoryId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerChannelCategoryMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryPermission", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ServerChannelCategoryPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ServerChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServerChannelCategoryId");

                    b.ToTable("ServerChannelCategoryRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRolePermission", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ServerChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelCategoryId", "RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServerChannelCategoryId");

                    b.ToTable("ServerChannelCategoryRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsAgeRestricted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderWeight")
                        .HasColumnType("int");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("SlowMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ServerTextChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "AccountId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerTextChannelMemberPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "AccountId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerTextChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ServerTextChannelPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerTextChannelRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRolePermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "RoleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerTextChannelRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<long>("BitRate")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsAgeRestricted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderWeight")
                        .HasColumnType("int");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<int>("SlowMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Topic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("VideoQuality")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegionId");

                    b.ToTable("ServerVoiceChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "AccountId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerVoiceChannelMemberPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "AccountId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerVoiceChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ServerVoiceChannelPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerVoiceChannelRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRolePermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerVoiceChannelRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelAccountMessageTracker", b =>
                {
                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CoOwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OwnerId", "CoOwnerId", "SubjectId");

                    b.HasIndex("CoOwnerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ServerTextChannelAccountMessageTracker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageHolderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MessageHolderId");

                    b.HasIndex("ParentId");

                    b.ToTable("ServerTextChannelMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ServerTextChannelMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessagePin", b =>
                {
                    b.Property<decimal>("PinboardId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("PinboardId", "MessageId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("ServerTextChannelMessagePin");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelPinboard", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("ServerTextChannelPinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.VoiceChannel.ServerVoiceInvite", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("InviterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GuestInvite")
                        .HasColumnType("bit");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("TotalUses")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "InviterId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("InviterId");

                    b.ToTable("ServerVoiceInvite");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerEvent", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CreatorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventFrequency")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerEvent");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerInvite", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("InviterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("TotalUses")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "InviterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("InviterId");

                    b.ToTable("ServerInvite");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", b =>
                {
                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("FolderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JoinMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("KickFromServerOnVoiceLeave")
                        .HasColumnType("bit");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("AccountId", "ServerId");

                    b.HasIndex("ServerId");

                    b.HasIndex("FolderId", "FolderName");

                    b.ToTable("ServerProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerAuditLog", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeLogged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerAuditLog");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerBan", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("TimeExpired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeKeepMessagesBefore")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerBan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte?>("CategoryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ServerPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermissionCategory", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerPermissionCategory");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerProfileServerRole", b =>
                {
                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeGranted")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerProfileServerRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("AllowAnyoneToMention")
                        .HasColumnType("bit");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisplaySeperatelyFromOnlineMembers")
                        .HasColumnType("bit");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRolePermission", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("ServerRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UploaderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UploaderId");

                    b.ToTable("ServerEmote");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionServerURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerRegion");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("DefaultNotificationSettingsMode")
                        .HasColumnType("int");

                    b.Property<int>("ExplicitImageFilterMode")
                        .HasColumnType("int");

                    b.Property<decimal?>("InactiveChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("PromptMembersToReplyWithASticker")
                        .HasColumnType("bit");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Require2FAForModeratorActions")
                        .HasColumnType("bit");

                    b.Property<bool>("SendHelpfulTipsForServerSetup")
                        .HasColumnType("bit");

                    b.Property<bool>("SendRandomWelcomeMessageWhenSomeoneJoins")
                        .HasColumnType("bit");

                    b.Property<string>("ServerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInviteBackgroundUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowMembersInChannelList")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SystemMessagesChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("VerificationLevelMode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSoundboardSound", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AssociatedEmoteId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("SoundFileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UploaderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedEmoteId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UploaderId");

                    b.ToTable("ServerSoundboardSound");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerWebhook", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("TextChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("WebhookEndpointURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("ServerWebhook");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Colour")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.HasKey("Id", "Name");

                    b.ToTable("AccountServerFolder");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SecurityCredentials");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PasswordSetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CustomStatusReportCustomStatusReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("CustomStatusReportCustomStatusReportReason");
                });

            modelBuilder.Entity("FeedbackReportFeedbackReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("FeedbackReportFeedbackReportReason");
                });

            modelBuilder.Entity("MessageReportMessageReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("MessageReportMessageReportReason");
                });

            modelBuilder.Entity("ProfileReportProfileReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("ProfileReportProfileReportReason");
                });

            modelBuilder.Entity("BugReportBugReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", "ActivityStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", "CustomStatus")
                        .WithOne("Account")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.Account", "CustomStatusId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("CoreLib.Entities.EchoCore.UserCore.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.Account", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityStatus");

                    b.Navigation("CustomStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountBlock", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Blocked")
                        .WithMany()
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Blocker")
                        .WithMany("BlockedAccounts")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountConnection", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Connections")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.Connection", "Connection")
                        .WithMany("AccountConnections")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedVoices")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNickname", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("NicknamedAccounts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNote", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("NotedAccounts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("MutedServers")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany()
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Subject")
                        .WithMany("Muters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerTextChannelMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("MutedTextChannels")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany()
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Subject")
                        .WithMany("Muters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerVoiceChannelMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("MutedVoiceChannels")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany()
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Subject")
                        .WithMany("Muters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSession", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Sessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne("Settings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Language", "Language")
                        .WithMany("AccountSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSoundboardMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedSoundboards")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountVideoMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany()
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Issuer")
                        .WithMany("IssuedViolations")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany("Violations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Issuer");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithOne("Appeal")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", "ViolationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", "Appeal")
                        .WithOne("Review")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", "AppealId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reviewer")
                        .WithMany("ReviewedAppeals")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Appeal");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Keybind", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.ApplicationKeybind", "ApplicationKeybind")
                        .WithMany("Keybinds")
                        .HasForeignKey("ApplicationKeybindId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", "KeybindSettings")
                        .WithMany("Keybinds")
                        .HasForeignKey("KeybindSettingsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ApplicationKeybind");

                    b.Navigation("KeybindSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.RolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AccessibilitySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AccessibilitySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AccessibilitySettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ActivitySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("ActivitySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ActivitySettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AdvancedSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AdvancedSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AdvancedSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AppearanceSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AppearanceSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AppearanceSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Theme", "Theme")
                        .WithMany("AppearanceSettings")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ChatSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("ChatSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ChatSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.FriendRequestSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "RequestedAccount")
                        .WithOne()
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.FriendRequestSettings", "AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("FriendRequestSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.FriendRequestSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");

                    b.Navigation("RequestedAccount");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.GameOverlaySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne()
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.GameOverlaySettings", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("KeybindSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.NotificationSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("NotificationSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.NotificationSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.PrivacySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne()
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.PrivacySettings", "Id");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("PrivacySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.PrivacySettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.SoundboardSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("SoundboardSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.SoundboardSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.StreamerModeSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("StreamerModeSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.StreamerModeSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VideoSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("VideoSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VideoSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VoiceSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("VoiceSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VoiceSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("BillingInformation")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", "BillingInformation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("BillingInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", "Currency")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingInformation");

                    b.Navigation("Currency");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionActivePeriod", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", "TransactionGroup")
                        .WithMany("ActivePeriods")
                        .HasForeignKey("TransactionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("TransactionGroup");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlanActivePeriod", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("ActivePeriods")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransaction", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionRefund", "Refund")
                        .WithOne("Transaction")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransaction", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", "Subscription")
                        .WithMany("SubcriptionTransactions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", "TransactionGroup")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Refund");

                    b.Navigation("Subscription");

                    b.Navigation("TransactionGroup");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", "Currency")
                        .WithMany("TransactionGroups")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatAccountMessageTracker", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "CoOwner")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("CoOwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Owner")
                        .WithMany("ChatMessageTrackers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Subject")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CoOwner");

                    b.Navigation("Owner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatInvite", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Inviter")
                        .WithMany("ChatInvites")
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany("Invites")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ChatMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "MessageHolder")
                        .WithMany("Messages")
                        .HasForeignKey("MessageHolderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("MessageHolder");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Message")
                        .WithOne("MessagePin")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", "MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", "Pinboard")
                        .WithMany("PinnedMessages")
                        .HasForeignKey("PinboardId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Pinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", null)
                        .WithMany("Mutes")
                        .HasForeignKey("ChatId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedChats")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatParticipancy", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Owner")
                        .WithOne("Pinboard")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", "OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendSuggestion", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Receiver")
                        .WithMany("FriendSuggestions")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Suggestion")
                        .WithMany()
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendshipParticipancy", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.FriendCore.Friendship", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Receiver")
                        .WithMany("IncomingFriendRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", "SenderRequest")
                        .WithOne("ReceiverRequest")
                        .HasForeignKey("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", "SenderRequestId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("SenderRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Sender")
                        .WithMany("OutgoingFriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.PaymentMethod", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", "BillingInformation")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("BillingInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", "Type")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingInformation");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("CustomStatusReports")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedCustomStatusReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("ReportedCustomStatuses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("MessageReports")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedMessageReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ReportedMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("ProfileReports")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedProfileReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("ReportedProfiles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("ChannelCategories")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("CategoryMemberPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", "MemberSettings")
                        .WithMany("Permissions")
                        .HasForeignKey("AccountId", "ChannelCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("CategoryMemberPermissions")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChannelCategory");

                    b.Navigation("MemberSettings");

                    b.Navigation("Permission");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany("MemberSettings")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", null)
                        .WithMany("CategoryMemberSettings")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("CategoryMemberSettings")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ChannelCategory");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany("AllowedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChannelCategory");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany()
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("ChannelCategoryRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ServerChannelCategoryId");

                    b.Navigation("ChannelCategory");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany()
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("ChannelCategoryRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("ServerChannelCategoryId");

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", "ChannelCategoryRole")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelCategoryId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChannelCategory");

                    b.Navigation("ChannelCategoryRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "Category")
                        .WithMany("TextChannels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Owner")
                        .WithMany("TextChannels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("TextChannelMemberPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("TextChannelMemberPermissions")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", "MemberSettings")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("MemberSettings");

                    b.Navigation("Permission");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("MemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", null)
                        .WithMany("TextChannelMemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("TextChannelMemberSettings")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Channel");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("AllowedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("TextChannelRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("TextChannelRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", "ChannelRole")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "Category")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Owner")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", "Region")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("VoiceChannelMemberPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("VoiceChannelMemberPermissions")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", "MemberSettings")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("MemberSettings");

                    b.Navigation("Permission");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("MemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", null)
                        .WithMany("VoiceChannelMemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("VoiceChannelMemberSettings")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Channel");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("AllowedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("VoiceChannelRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("VoiceChannelRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", "ChannelRole")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelAccountMessageTracker", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "CoOwner")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("CoOwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Owner")
                        .WithMany("TextChannelMessageTrackers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Subject")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CoOwner");

                    b.Navigation("Owner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ChannelMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "MessageHolder")
                        .WithMany("Messages")
                        .HasForeignKey("MessageHolderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("MessageHolder");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessagePin", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Message")
                        .WithOne("MessagePin")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessagePin", "MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelPinboard", "Pinboard")
                        .WithMany("PinnedMessages")
                        .HasForeignKey("PinboardId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Pinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelPinboard", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Owner")
                        .WithOne("Pinboard")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelPinboard", "OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.VoiceChannel.ServerVoiceInvite", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("VoiceInvites")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Inviter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerEvent", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Creator")
                        .WithMany("ServerEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("Events")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerInvite", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("ServerInvites")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("Invites")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Subject")
                        .WithMany("Invites")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Inviter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Servers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", "Folder")
                        .WithMany("Servers")
                        .HasForeignKey("FolderId", "FolderName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Folder");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerAuditLog", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerBan", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("BanList")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermissionCategory", "Category")
                        .WithMany("Permissions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerProfileServerRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("Recipients")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("Emotes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "SystemMessagesChannel")
                        .WithOne("ServerSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", "Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "InactiveChannel")
                        .WithOne("ServerSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", "Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithOne("Settings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", "Region")
                        .WithMany("ServerSettings")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InactiveChannel");

                    b.Navigation("Region");

                    b.Navigation("Server");

                    b.Navigation("SystemMessagesChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSoundboardSound", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", "AssociatedEmote")
                        .WithMany("SoundboardSounds")
                        .HasForeignKey("AssociatedEmoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("SoundboardSounds")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssociatedEmote");

                    b.Navigation("Server");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerWebhook", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "TextChannel")
                        .WithMany("Webhooks")
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("TextChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Folders")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.UserCore.User", "User")
                        .WithOne("SecurityCredentials")
                        .HasForeignKey("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomStatusReportCustomStatusReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeedbackReportFeedbackReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageReportMessageReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfileReportProfileReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.Navigation("BlockedAccounts");

                    b.Navigation("ChannelMessages");

                    b.Navigation("ChatInvites");

                    b.Navigation("ChatMessageTrackers");

                    b.Navigation("ChatMessages");

                    b.Navigation("Connections");

                    b.Navigation("CustomStatusReports");

                    b.Navigation("Folders");

                    b.Navigation("FriendSuggestions");

                    b.Navigation("IncomingFriendRequests");

                    b.Navigation("IssuedViolations");

                    b.Navigation("MessageReports");

                    b.Navigation("MutedChats");

                    b.Navigation("MutedServers");

                    b.Navigation("MutedSoundboards");

                    b.Navigation("MutedTextChannels");

                    b.Navigation("MutedVoiceChannels");

                    b.Navigation("MutedVoices");

                    b.Navigation("NicknamedAccounts");

                    b.Navigation("NotedAccounts");

                    b.Navigation("OutgoingFriendRequests");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ProfileReports");

                    b.Navigation("ReportedCustomStatuses");

                    b.Navigation("ReportedMessages");

                    b.Navigation("ReportedProfiles");

                    b.Navigation("ReviewedAppeals");

                    b.Navigation("ServerEvents");

                    b.Navigation("ServerInvites");

                    b.Navigation("Servers");

                    b.Navigation("Sessions");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("TextChannelMessageTrackers");

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.Navigation("AccessibilitySettings")
                        .IsRequired();

                    b.Navigation("ActivitySettings")
                        .IsRequired();

                    b.Navigation("AdvancedSettings")
                        .IsRequired();

                    b.Navigation("AppearanceSettings")
                        .IsRequired();

                    b.Navigation("BillingInformation")
                        .IsRequired();

                    b.Navigation("ChatSettings")
                        .IsRequired();

                    b.Navigation("FriendRequestSettings")
                        .IsRequired();

                    b.Navigation("KeybindSettings")
                        .IsRequired();

                    b.Navigation("NotificationSettings")
                        .IsRequired();

                    b.Navigation("PrivacySettings")
                        .IsRequired();

                    b.Navigation("SoundboardSettings")
                        .IsRequired();

                    b.Navigation("StreamerModeSettings")
                        .IsRequired();

                    b.Navigation("VideoSettings")
                        .IsRequired();

                    b.Navigation("VoiceSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.Navigation("Appeal");

                    b.Navigation("ConsumedCustomStatusReports");

                    b.Navigation("ConsumedMessageReports");

                    b.Navigation("ConsumedProfileReports");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", b =>
                {
                    b.Navigation("Subscriptions");

                    b.Navigation("TransactionGroups");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ApplicationKeybind", b =>
                {
                    b.Navigation("Keybinds");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Language", b =>
                {
                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", b =>
                {
                    b.Navigation("Keybinds");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", b =>
                {
                    b.Navigation("PaymentMethods");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", b =>
                {
                    b.Navigation("SubcriptionTransactions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", b =>
                {
                    b.Navigation("ActivePeriods");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", b =>
                {
                    b.Navigation("ActivePeriods");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionRefund", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Theme", b =>
                {
                    b.Navigation("AppearanceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.Chat", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("MessageTrackers");

                    b.Navigation("Messages");

                    b.Navigation("Mutes");

                    b.Navigation("Pinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Children");

                    b.Navigation("MessagePin");

                    b.Navigation("MessageTrackers");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", b =>
                {
                    b.Navigation("PinnedMessages");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.Connection", b =>
                {
                    b.Navigation("AccountConnections");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.Navigation("ReceiverRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", b =>
                {
                    b.Navigation("AllowedPermissions");

                    b.Navigation("AllowedRoles");

                    b.Navigation("MemberPermissions");

                    b.Navigation("MemberSettings");

                    b.Navigation("RolePermissions");

                    b.Navigation("TextChannels");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", b =>
                {
                    b.Navigation("AllowedPermissions");

                    b.Navigation("AllowedRoles");

                    b.Navigation("Invites");

                    b.Navigation("MemberPermissions");

                    b.Navigation("MemberSettings");

                    b.Navigation("MessageTrackers");

                    b.Navigation("Messages");

                    b.Navigation("Muters");

                    b.Navigation("Pinboard");

                    b.Navigation("RolePermissions");

                    b.Navigation("ServerSettings");

                    b.Navigation("Webhooks");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", b =>
                {
                    b.Navigation("AllowedPermissions");

                    b.Navigation("AllowedRoles");

                    b.Navigation("MemberPermissions");

                    b.Navigation("MemberSettings");

                    b.Navigation("Muters");

                    b.Navigation("RolePermissions");

                    b.Navigation("ServerSettings");

                    b.Navigation("VoiceInvites");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Children");

                    b.Navigation("MessagePin");

                    b.Navigation("MessageTrackers");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelPinboard", b =>
                {
                    b.Navigation("PinnedMessages");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", b =>
                {
                    b.Navigation("CategoryMemberPermissions");

                    b.Navigation("CategoryMemberSettings");

                    b.Navigation("Roles");

                    b.Navigation("TextChannelMemberPermissions");

                    b.Navigation("TextChannelMemberSettings");

                    b.Navigation("VoiceChannelMemberPermissions");

                    b.Navigation("VoiceChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", b =>
                {
                    b.Navigation("CategoryMemberPermissions");

                    b.Navigation("CategoryMemberSettings");

                    b.Navigation("RolePermissions");

                    b.Navigation("TextChannelMemberPermissions");

                    b.Navigation("TextChannelMemberSettings");

                    b.Navigation("VoiceChannelMemberPermissions");

                    b.Navigation("VoiceChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermissionCategory", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", b =>
                {
                    b.Navigation("ChannelCategoryRolePermissions");

                    b.Navigation("ChannelCategoryRoles");

                    b.Navigation("Permissions");

                    b.Navigation("Recipients");

                    b.Navigation("TextChannelRolePermissions");

                    b.Navigation("TextChannelRoles");

                    b.Navigation("VoiceChannelRolePermissions");

                    b.Navigation("VoiceChannelRoles");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BanList");

                    b.Navigation("ChannelCategories");

                    b.Navigation("Emotes");

                    b.Navigation("Events");

                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("Muters");

                    b.Navigation("Settings");

                    b.Navigation("SoundboardSounds");

                    b.Navigation("TextChannels");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", b =>
                {
                    b.Navigation("SoundboardSounds");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", b =>
                {
                    b.Navigation("ServerSettings");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("SecurityCredentials");
                });
#pragma warning restore 612, 618
        }
    }
}
