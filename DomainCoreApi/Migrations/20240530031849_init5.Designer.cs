// <auto-generated />
using System;
using DomainCoreApi.EFCORE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DomainCoreApi.Migrations
{
    [DbContext(typeof(EchoDbContext))]
    [Migration("20240530031849_init5")]
    partial class init5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BugReportBugReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("BugReportBugReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte>("ActivityStatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("TimeLastLogon")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountAccountVolume", b =>
                {
                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("Volume")
                        .HasColumnType("tinyint");

                    b.HasKey("OwnerId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountAccountVolume");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IconColor")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AccountActivityStatus");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "",
                            Icon = "Icons.Material.Filled.Circle",
                            IconColor = "Success",
                            Name = "Online"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "",
                            Icon = "Icons.Material.Filled.Brightness2",
                            IconColor = "Warning",
                            Name = "Away"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "You will not receive any desktop notifications.",
                            Icon = "Icons.Material.Filled.RemoveCircle",
                            IconColor = "Error",
                            Name = "Busy"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "",
                            Icon = "Icons.Material.Filled.StopCircle",
                            IconColor = "Dark",
                            Name = "Offline"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "You will not appear online, but have full access to all of Echo.",
                            Icon = "Icons.Material.Filled.StopCircle",
                            IconColor = "Dark",
                            Name = "Invisible"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountBlock", b =>
                {
                    b.Property<decimal>("BlockerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("BlockedId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("BlockerId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("AccountBlock");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountConnection", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("DisplayOnProfile")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ConnectionId");

                    b.ToTable("AccountConnection");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CustomMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountCustomStatus");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountDirectMessageRelation", b =>
                {
                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RelationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OwnerId", "RelationId");

                    b.HasIndex("RelationId");

                    b.ToTable("AccountDirectMessageRelation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNickname", b =>
                {
                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("AuthorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountNickname");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNote", b =>
                {
                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("AuthorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountNote");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("About")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AvatarFileURL")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BannerColor")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AccountProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountRole", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("RoleId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerMute", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("SubjectId", "MuterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MuterId");

                    b.ToTable("AccountServerMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerVoiceChannelMute", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("SubjectId", "MuterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MuterId");

                    b.ToTable("AccountServerVoiceChannelMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSession", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TimeStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeStopped")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountSession");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSoundboardMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountSoundboardMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountVideoMute", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("SubjectId", "MuterId");

                    b.HasIndex("MuterId");

                    b.ToTable("AccountVideoMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IssuerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountViolation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ViolationId")
                        .IsUnique();

                    b.ToTable("AccountViolationAppeal");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AppealId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<decimal>("ReviewerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AppealId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.ToTable("AccountViolationAppealReview");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.DirectMessageRelation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("ChatId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.ToTable("DirectMessageRelation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.ServerTextChannelMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ServerTextChannelMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcceptedCurrency");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "dkk"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "eur"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "usd"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ApplicationKeybind", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApplicationKeybind");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "mutes self if unmuted and unmutes self if muted",
                            Name = "mute / unmute self"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Edit a message if you have the permission",
                            Name = "Edit message"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Pin a message in a chat",
                            Name = "Pin message"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "make a reply to a message in a chat",
                            Name = "Reply"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Danmark"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Sverige"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Noreg"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Deutschland"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "La France"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "华人(Chinese)"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "日本(Japan)"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "남한(south korea)"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "United States of America"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Keybind", b =>
                {
                    b.Property<decimal>("KeybindSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("ApplicationKeybindId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KeybindSettingsId", "ApplicationKeybindId");

                    b.HasIndex("Action")
                        .IsUnique()
                        .HasFilter("[Action] IS NOT NULL");

                    b.HasIndex("ApplicationKeybindId");

                    b.ToTable("Keybind");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LanguageCode = "da-DK",
                            Name = "Dansk"
                        },
                        new
                        {
                            Id = 2L,
                            LanguageCode = "se-SV",
                            Name = "Svenska"
                        },
                        new
                        {
                            Id = 3L,
                            LanguageCode = "no-NO",
                            Name = "Norsk"
                        },
                        new
                        {
                            Id = 4L,
                            LanguageCode = "de-DE",
                            Name = "Deutsch"
                        },
                        new
                        {
                            Id = 5L,
                            LanguageCode = "en-GB",
                            Name = "English (UK)"
                        },
                        new
                        {
                            Id = 6L,
                            LanguageCode = "fr-FR",
                            Name = "Français"
                        },
                        new
                        {
                            Id = 7L,
                            LanguageCode = "zh-CN",
                            Name = "中文 (traditional Chinese)"
                        },
                        new
                        {
                            Id = 8L,
                            LanguageCode = "ja-JP",
                            Name = "日本語 (Japanese)"
                        },
                        new
                        {
                            Id = 9L,
                            LanguageCode = "ko-KR",
                            Name = "한국어 (korean)"
                        },
                        new
                        {
                            Id = 10L,
                            LanguageCode = "en-Us",
                            Name = "English (USA)"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/b/b5/PayPal.svg",
                            Name = "PayPal"
                        },
                        new
                        {
                            Id = 2L,
                            Icon = "https://upload.wikimedia.org/wikipedia/fi/f/fd/MobilePay_logo.svg",
                            Name = "MobilePay"
                        },
                        new
                        {
                            Id = 3L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/e/e8/Paysafe.svg",
                            Name = "PaysafeCard"
                        },
                        new
                        {
                            Id = 4L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/5/5e/Visa_Inc._logo.svg",
                            Name = "Visa"
                        },
                        new
                        {
                            Id = 5L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/2/2a/Mastercard-logo.svg",
                            Name = "MasterCard"
                        },
                        new
                        {
                            Id = 6L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/f/f2/Google_Pay_Logo.svg",
                            Name = "Google Pay"
                        },
                        new
                        {
                            Id = 7L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/b/b0/Apple_Pay_logo.svg",
                            Name = "Apple Pay"
                        },
                        new
                        {
                            Id = 8L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/b/ba/Stripe_Logo%2C_revised_2016.svg",
                            Name = "Stripe"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Permission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Name = "View_Server"
                        },
                        new
                        {
                            Id = 2m,
                            Name = "Send_Message"
                        },
                        new
                        {
                            Id = 3m,
                            Name = "Add_Friend"
                        },
                        new
                        {
                            Id = 4m,
                            Name = "Join_Voice"
                        },
                        new
                        {
                            Id = 5m,
                            Name = "Delete_Account"
                        },
                        new
                        {
                            Id = 6m,
                            Name = "Create_Server"
                        },
                        new
                        {
                            Id = 7m,
                            Name = "Create_Chats"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2m,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3m,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 4m,
                            Name = "System_Owner"
                        },
                        new
                        {
                            Id = 5m,
                            Name = "Premium_Sonar"
                        },
                        new
                        {
                            Id = 6m,
                            Name = "Premium_Sonar_Plus"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.RolePermission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AccessibilitySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowTextToSpeech")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysUnderlineLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplySaturationToCustomColors")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoPlayGIFsOnAppFocus")
                        .HasColumnType("bit");

                    b.Property<bool>("PlayAnimatedEmojis")
                        .HasColumnType("bit");

                    b.Property<bool>("ReducedMotion")
                        .HasColumnType("bit");

                    b.Property<int>("RoleColorMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("SaturationPercent")
                        .HasMaxLength(100)
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowSendMessageButton")
                        .HasColumnType("bit");

                    b.Property<int>("StickerAnimationMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("SyncContrastSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("SyncProfileThemes")
                        .HasColumnType("bit");

                    b.Property<bool>("SyncReducedMotionWithPC")
                        .HasColumnType("bit");

                    b.Property<byte>("TextToSpeechRate")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)4);

                    b.Property<bool>("UseLegacyChatInput")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AccessibilitySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ActivitySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowFriendsToJoinGame")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowVoiceChannelParticipantsToJoinGame")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayCurrentActivityAsAStatusMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareActivityStatusOnLargeServerJoin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ActivitySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AdvancedSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutoNavigateServerHome")
                        .HasColumnType("bit");

                    b.Property<bool>("DeveloperMode")
                        .HasColumnType("bit");

                    b.Property<bool>("UseHardwareAccelerationToMakeEchoSmoother")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AdvancedSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AppearanceSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("DarkSideBar")
                        .HasColumnType("bit");

                    b.Property<string>("InAppIcon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("MessageDisplayMode")
                        .HasColumnType("int");

                    b.Property<byte>("PixelChatFontScale")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PixelSpaceBetweenMessageGroupsScale")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowAvatarsInCompactMode")
                        .HasColumnType("bit");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ZoomLevel")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("AppearanceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ChatSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutoConvertEmoticonsToEmojis")
                        .HasColumnType("bit");

                    b.Property<int>("ContentSpoilerMode")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayDirectVideosAndImagesUploads")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayVideosAndImagesFromLink")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableStickerSuggestions")
                        .HasColumnType("bit");

                    b.Property<bool>("LoadImageDescriptionsWithImages")
                        .HasColumnType("bit");

                    b.Property<bool>("OpenThreadsInSplitView")
                        .HasColumnType("bit");

                    b.Property<bool>("PreviewEmbedsAndWebsiteLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("PreviewEmojisAndMarkdownWhilstTyping")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowEmoteReactionsOnMessages")
                        .HasColumnType("bit");

                    b.Property<bool>("StickersInAutocomplete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ChatSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.FriendRequestSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Everyone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("FriendsOfFriends")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ServerMembers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("FriendRequestSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.GameOverlaySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("AvatarSizeMode")
                        .HasColumnType("int");

                    b.Property<int>("DisplayNamesMode")
                        .HasColumnType("int");

                    b.Property<int>("DisplayUsersMode")
                        .HasColumnType("int");

                    b.Property<bool>("EnableGameOverlay")
                        .HasColumnType("bit");

                    b.Property<int>("OverlayNotificationsPlacement")
                        .HasColumnType("int");

                    b.Property<bool>("ShowTextChatNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("ToggleOverlayLockKeybind")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Shift + L");

                    b.HasKey("Id");

                    b.ToTable("GameOverlaySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("KeybindSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.NotificationSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowActivityEndNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowActivityStartNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowActivityUserJoinNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowActivityUserLeaveNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDeafenNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowIncomingRingNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowInvitedToSpeakNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMessageNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMuteNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOutgoingRingNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPTTActivateNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPTTDeactivateNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStreamStartedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStreamStoppedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUndeafenNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUnmuteNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserJoinNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserLeaveNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserMovedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowViewerJoinNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowViewerLeaveNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowVoiceDisconnectedNotificationSound")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableAllNotificationSounds")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableDesktopNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSameChannelNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableTaskbarFlashing")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableUnreadMessageBadge")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusModeEnabled")
                        .HasColumnType("bit");

                    b.Property<byte>("PushNotificationInactiveTimeoutInMinutes")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ReceiveAnnouncementAndUpdateEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveCommunicationEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveRecommendationEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveSocialEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveTipEmails")
                        .HasColumnType("bit");

                    b.Property<int>("TextToSpeechNotificationMode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.PrivacySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("DMFromFriends")
                        .HasColumnType("int");

                    b.Property<int>("DMFromServerChatroom")
                        .HasColumnType("int");

                    b.Property<int>("DMFromUnknownUsers")
                        .HasColumnType("int");

                    b.Property<int>("DMSpamFilter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.SoundboardSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("SoundboardVolume")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("SoundboardSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.StreamerModeSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutomaticallyEnableAndDisableIfStreaming")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableSounds")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableStreamerMode")
                        .HasColumnType("bit");

                    b.Property<bool>("HideEchoWindowFromScreenCapture")
                        .HasColumnType("bit");

                    b.Property<bool>("HideInviteLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("HidePersonalInformation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StreamerModeSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VideoSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AlwaysPreviewVideo")
                        .HasColumnType("bit");

                    b.Property<string>("CameraDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableForceQualityOfServicePacketPrio")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableHardwareAccelerationForVideo")
                        .HasColumnType("bit");

                    b.Property<bool>("UseDDLInjectionToCaptureScreen")
                        .HasColumnType("bit");

                    b.Property<bool>("UseOpenH264VideoCodec")
                        .HasColumnType("bit");

                    b.Property<string>("VideoBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VideoSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VoiceSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AdvancedVoiceActivity")
                        .HasColumnType("bit");

                    b.Property<byte>("Attenuation")
                        .HasColumnType("tinyint");

                    b.Property<int>("AudioSubSystemMode")
                        .HasColumnType("int");

                    b.Property<bool>("AutomaticGainControl")
                        .HasColumnType("bit");

                    b.Property<bool>("AutomaticallyDetermineInputSensitivity")
                        .HasColumnType("bit");

                    b.Property<bool>("DeafenSelf")
                        .HasColumnType("bit");

                    b.Property<bool>("EchoCancellation")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableDiagnosticAudioRecording")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableVoiceDebugLogging")
                        .HasColumnType("bit");

                    b.Property<string>("InputDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputMode")
                        .HasColumnType("int");

                    b.Property<byte>("InputSensitivity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("InputVolume")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LowerVolumeOfOtherApplicationsWhenISpeak")
                        .HasColumnType("bit");

                    b.Property<bool>("LowerVolumeOfOtherApplicationsWhenOthersSpeak")
                        .HasColumnType("bit");

                    b.Property<bool>("MuteSelf")
                        .HasColumnType("bit");

                    b.Property<int>("NoiseSuppression")
                        .HasColumnType("int");

                    b.Property<string>("OutputDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("OutputVolume")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowWarningWhenNoMicInputDetected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("VoiceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.WindowSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("MinimizeOnClose")
                        .HasColumnType("bit");

                    b.Property<bool>("OpenEchoOnPCStartup")
                        .HasColumnType("bit");

                    b.Property<bool>("StartMinimized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WindowSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("BillingInformation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("AgreeToEchosWithdrawalRight")
                        .HasColumnType("bit");

                    b.Property<decimal>("BillingInformationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<double>("MyCostEUR")
                        .HasColumnType("float");

                    b.Property<decimal>("SubscriptionPlanId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("TimeCancelled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSubscribed")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillingInformationId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionActivePeriod", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubcriptionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("TimePaused")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransactionGroupId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SubcriptionId");

                    b.HasIndex("TransactionGroupId");

                    b.ToTable("SubscriptionActivePeriod");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<double>("CostEUR")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SubscriptionPlan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlanActivePeriod", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("IsTemporarilyDisabled")
                        .HasColumnType("bit");

                    b.Property<double?>("PercentageSale")
                        .HasColumnType("float");

                    b.Property<decimal>("SubscriptionPlanId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeStarts")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeStops")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("SubscriptionPlanActivePeriod");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransaction", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double>("ChargedAmount")
                        .HasColumnType("float");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubscriptionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimePaid")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransactionGroupId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TransactionGroupId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("SubscriptionTransaction");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Fulfilled")
                        .HasColumnType("bit");

                    b.Property<double>("ToBePaidAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("SubscriptionTransactionGroup");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionRefund", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeRefunded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTransactionRefund");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Theme");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Dark"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Light"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.Chat", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatAccountMessageTracker", b =>
                {
                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CoOwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OwnerId", "CoOwnerId");

                    b.HasIndex("CoOwnerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatAccountMessageTracker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatInvite", b =>
                {
                    b.Property<string>("InviteCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InviterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("TotalUses")
                        .HasColumnType("int");

                    b.HasKey("InviteCode");

                    b.HasIndex("InviterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatInvite");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageHolderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("TimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MessageHolderId");

                    b.HasIndex("ParentId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLocationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ChatMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", b =>
                {
                    b.Property<decimal>("PinboardId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("PinboardId", "MessageId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("ChatMessagePin");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatParticipancy", b =>
                {
                    b.Property<decimal>("ParticipantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ParticipantId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatParticipancy");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ConnectionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthenticationEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizeEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeReturnEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenCheckEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenRefreshEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthenticationEndpoint = "PayPal.com/api/v3/authenticate",
                            AuthorizationEndpoint = "PayPal.com/api/v3/authorization",
                            AuthorizeEndpoint = "PayPal.com/api/v3/authorize",
                            ExchangeReturnEndpoint = "PayPal.com/api/v3/token/exchange",
                            PlatformIcon = "PayPalIcon.png",
                            PlatformName = "PayPal",
                            TokenCheckEndpoint = "PayPal.com/api/v3/token/validate",
                            TokenRefreshEndpoint = "PayPal.com/api/v3/token/refresh"
                        },
                        new
                        {
                            Id = 2L,
                            AuthenticationEndpoint = "stripe.com/api/v3/authenticate",
                            AuthorizationEndpoint = "stripe.com/api/v3/authorization",
                            AuthorizeEndpoint = "stripe.com/api/v3/authorize",
                            ExchangeReturnEndpoint = "stripe.com/api/v3/token/exchange",
                            PlatformIcon = "CreditCard.png",
                            PlatformName = "Card",
                            TokenCheckEndpoint = "stripe.com/api/v3/token/validate",
                            TokenRefreshEndpoint = "stripe.com/api/v3/token/refresh"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendSuggestion", b =>
                {
                    b.Property<decimal>("ReceiverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SuggestionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeSuggested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ReceiverId", "SuggestionId");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("ReceiverId", "SuggestionId")
                        .IsUnique();

                    b.ToTable("FriendSuggestion");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.Friendship", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendshipParticipancy", b =>
                {
                    b.Property<decimal>("ParticipantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ParticipantId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("FriendshipParticipancy");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("ReceiverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SenderRequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderRequestId")
                        .IsUnique();

                    b.ToTable("IncomingFriendRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("SenderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("OutgoingFriendRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.PaymentMethod", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Description")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultMethod")
                        .HasColumnType("bit");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("BugReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BugReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("CustomStatusReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomStatusReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CustomMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ReportedCustomStatus");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("FeedbackReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("MessageReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ReportedMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLocationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ReportedMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("ProfileReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfileReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AvatarFileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ReportedProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerChannelCategory");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberPermission", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelCategoryId", "AccountId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccountId", "ChannelCategoryId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerChannelCategoryMemberPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", b =>
                {
                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("AccountId", "ChannelCategoryId");

                    b.HasIndex("ChannelCategoryId");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerChannelCategoryMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryPermission", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ServerChannelCategoryPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ServerChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServerChannelCategoryId");

                    b.ToTable("ServerChannelCategoryRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRolePermission", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ServerChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelCategoryId", "RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServerChannelCategoryId");

                    b.ToTable("ServerChannelCategoryRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsAgeRestricted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderWeight")
                        .HasColumnType("int");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("SlowMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ServerTextChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "AccountId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerTextChannelMemberPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "AccountId");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerTextChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ServerTextChannelPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerTextChannelRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRolePermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "RoleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerTextChannelRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<long>("BitRate")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsAgeRestricted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderWeight")
                        .HasColumnType("int");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<int>("SlowMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Topic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("VideoQuality")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegionId");

                    b.ToTable("ServerVoiceChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "AccountId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerVoiceChannelMemberPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "AccountId");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerVoiceChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelPermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ServerVoiceChannelPermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", b =>
                {
                    b.Property<decimal>("ChannelCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChannelCategoryId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerVoiceChannelRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRolePermission", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerVoiceChannelRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelAccountMessageTracker", b =>
                {
                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CoOwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OwnerId", "CoOwnerId");

                    b.HasIndex("CoOwnerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ServerTextChannelAccountMessageTracker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageHolderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("TimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MessageHolderId");

                    b.HasIndex("ParentId");

                    b.ToTable("ServerTextChannelMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLocationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ServerTextChannelMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessagePin", b =>
                {
                    b.Property<decimal>("PinboardId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("PinboardId", "MessageId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("ServerTextChannelMessagePin");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.VoiceChannel.ServerVoiceInvite", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("InviterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GuestInvite")
                        .HasColumnType("bit");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("TotalUses")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "InviterId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("InviterId");

                    b.ToTable("ServerVoiceInvite");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerEvent", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CreatorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventFrequency")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerEvent");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerInvite", b =>
                {
                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("InviterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("TotalUses")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "InviterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("InviterId");

                    b.ToTable("ServerInvite");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", b =>
                {
                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("FolderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ImageIconURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("JoinMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("KickFromServerOnVoiceLeave")
                        .HasColumnType("bit");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("AccountId", "ServerId");

                    b.HasIndex("ServerId");

                    b.HasIndex("FolderId", "FolderName");

                    b.ToTable("ServerProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerAuditLog", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeLogged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerAuditLog");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerBan", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeKeepMessagesBefore")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerBan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte?>("CategoryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ServerPermission");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Description = "Allows the role to see the public channels that are not private. It’s normal to grant this permission to almost all roles, but the channel/category permission settings usually void it.",
                            Name = "View Channels"
                        },
                        new
                        {
                            Id = 2m,
                            Description = "Allows the role to access the channel settings of all channels it can see. Granting this permission can be extremely dangerous since deleted channels are not recoverable.",
                            Name = "Manage Channels"
                        },
                        new
                        {
                            Id = 3m,
                            Description = "Allows the role to create, edit, and remove all the roles that are below itself in the hierarchy. Users with this role can also add and remove roles to/from members. Granting this permission can be extremely dangerous since deleted roles are not recoverable, and ill-intended users can grant dangerous permissions to others.",
                            Name = "Manage Roles"
                        },
                        new
                        {
                            Id = 4m,
                            Description = "Allows the role to access the Emoji, Stickers, and Soundboard sections of the Server Settings. Users with this role can add expressions. Granting this permission can be dangerous since there isn’t an approval system for added expressions.",
                            Name = "Create Expressions"
                        },
                        new
                        {
                            Id = 5m,
                            Description = "Allows the role to access the Emoji, Stickers, and Soundboard sections of the Server Settings. Users with this role can edit and remove all expressions. Granting this permission can be dangerous since deleted expressions are not recoverable.",
                            Name = "Manage Expressions"
                        },
                        new
                        {
                            Id = 6m,
                            Description = "Allows the role to view the Audit Log section of the Server Settings. While the section doesn’t allow users to take any action, it can be dangerous to grant since there could be sensitive information in Audit Logs.",
                            Name = "View Audit Log"
                        },
                        new
                        {
                            Id = 7m,
                            Description = "Allows the role to view the Server Insights section of Server Settings. While Server Insights contains a lot of important information, there’s no harm in sharing them unless you don’t want to.",
                            Name = "View Server Insights"
                        },
                        new
                        {
                            Id = 8m,
                            Description = "Allows the role to add, edit, and remove webhooks. Granting this permission can be extremely dangerous since webhooks can bypass AutoMod, bots, and other moderation systems in place, allowing users to tag @everyone, post unwanted content, and similar ill-intended actions limitlessly and fast.",
                            Name = "Manage Webhooks"
                        },
                        new
                        {
                            Id = 9m,
                            Description = "Allows the role to adjust the server settings like name, icon, default settings, add bots, and change AutoMod rules. Granting this can be extremely dangerous since while server name, icon, and default settings can be easily fixed, removed AutoMod rules are not recoverable, and ill-intended bots can nuke (delete all the channels, ban all the members, etc.) your server.",
                            Name = "Manage Server"
                        },
                        new
                        {
                            Id = 10m,
                            Description = "Allows the role to create custom invites for the server. It’s normal to grant this to all roles unless you want to have only certain invites available. Be sure to provide your invite links in the server for people to copy and paste if you don’t want to grant this permission.",
                            Name = "Create Invite"
                        },
                        new
                        {
                            Id = 11m,
                            Description = "Allows the users with permission to change their own nicknames on your server. It’s a normal permission to grant.",
                            Name = "Change Nickname"
                        },
                        new
                        {
                            Id = 12m,
                            Description = "Allows the role to change the nicknames of other members. Granting this permission can be dangerous since ill-intended users might vandalize others’ profiles by changing their names.",
                            Name = "Manage Nicknames"
                        },
                        new
                        {
                            Id = 13m,
                            Description = "Allows the role to kick members that are below them in the user/role hierarchy by using the integrated /kick command or via the right-click menu. Granting this permission can be extremely dangerous since it allows the users to remove others from the server (kicked users can rejoin,) but it’s not the most dangerous part of it. Discord has a “pruning” feature - a feature that allows you to kick all the members that haven’t been in Discord in the last 7 or 30 days with no/selected roles. Pruning is a common vandalism method that can remove most users of a server. Preventing the prune vandalism is as simple as not granting the Kick Members permission.",
                            Name = "Kick Members"
                        },
                        new
                        {
                            Id = 14m,
                            Description = "Allows the role to ban members that are below them in the user/role hierarchy by using the integrated /ban command or via the right-click menu. Granting this permission can be extremely dangerous since it allows the users to ban every single user that is below them in the hierarchy, and banned users cannot rejoin the server, even with other accounts, since all bans are IP bans. Bans can be manually removed via the Bans section of the Server Settings.",
                            Name = "Ban Members"
                        },
                        new
                        {
                            Id = 15m,
                            Description = "Allows the role to timeout other users via the right-click menu. Users who are timed out cannot send messages in any channel or speak in voice channels. Granting this permission can be dangerous since it allows users to prevent others from interacting with the community.",
                            Name = "Timeout Members"
                        },
                        new
                        {
                            Id = 16m,
                            Description = "Allows the role to send messages in channels they can see. It’s normal to grant this permission to almost all roles, but it is usually voided by the channel/category permission settings.",
                            Name = "Send Messages"
                        },
                        new
                        {
                            Id = 17m,
                            Description = "Allows the role to send messages in threads they can see. It’s normal to grant this permission to almost all roles, but it is usually voided by the channel/category permission settings.",
                            Name = "Send Messages in Threads"
                        },
                        new
                        {
                            Id = 18m,
                            Description = "Allows the role to create public threads in channels they can see. Although Discord has a limit of 1000 for active threads (no limit on inactive), allowing users to create threads can make moderation a bit harder.",
                            Name = "Create Public Threads"
                        },
                        new
                        {
                            Id = 19m,
                            Description = "Allows the role to create private threads in channels they can see. The only way to see a private thread is to be mentioned in the thread or have the Manage Threads permission.",
                            Name = "Create Private Threads"
                        },
                        new
                        {
                            Id = 20m,
                            Description = "Allows the role to display embedded content for the links they send. A common misconception about this permission is that it allows or disallows users to send links. There are a few ways to disallow users from sending links, but this permission is not it. It only manages the embedded content (marked red in the image below) of a link.",
                            Name = "Embed Links"
                        },
                        new
                        {
                            Id = 21m,
                            Description = "Allows the role to attach files with any extension to the channels where they can send messages in. While this permission is normal to grant to every user in servers with a few thousand members, it can be mildly dangerous in situations where there are tens of thousands of members and a fast chat where moderation is also mildly difficult. Being able to attach files means they can literally attach any file, including malicious ones.",
                            Name = "Attach Files"
                        },
                        new
                        {
                            Id = 22m,
                            Description = "Allows the role to add reactions to messages they can see. When disallowed, users can still add reactions to the reactions that are already present.",
                            Name = "Add Reactions"
                        },
                        new
                        {
                            Id = 23m,
                            Description = "Allows the role to use emojis from other servers. It is usually granted to all users on most servers, just like the Use External Stickers permission. Don’t grant this permission if you want to ensure that no one uses ill-intended emojis on your server.",
                            Name = "Use External Emoji"
                        },
                        new
                        {
                            Id = 24m,
                            Description = "Allows the role to use stickers from other servers. It is usually granted to all users on most servers, just like the Use External Emoji permission. Don’t grant this permission if you want to ensure that no one uses ill-intended stickers on your server.",
                            Name = "Use External Stickers"
                        },
                        new
                        {
                            Id = 25m,
                            Description = "Allows the role to mention @everyone, @here, and all the roles even if their “Allow anyone to @mention this role” option is turned off. Granting this permission can be extremely dangerous since it allows users to spam mention everyone in the server and makes way for Mention Raids (multiple users joining the server and spam mentioning multiple users or even everyone).",
                            Name = "Mention @everyone, @here, and All Roles"
                        },
                        new
                        {
                            Id = 26m,
                            Description = "Allows the role to delete and pin messages they can see. Granting this permission can be very dangerous since it allows users to delete multiple messages of other users, potentially deleting every single message in the server.",
                            Name = "Manage Messages"
                        },
                        new
                        {
                            Id = 27m,
                            Description = "Allows the role to edit, close, and delete threads. Granting this permission can be very dangerous since it gives full control over threads, potentially deleting all of them.",
                            Name = "Manage Threads"
                        },
                        new
                        {
                            Id = 28m,
                            Description = "Allows the role to see every message sent in text channels. When disallowed, users only see messages when they’re online and in a text channel. It’s normal to grant this permission to everyone.",
                            Name = "Read Message History"
                        },
                        new
                        {
                            Id = 29m,
                            Description = "Allows the user to use the /tts command, which triggers a text-to-speech player to read out the provided message to everyone who’s viewing the channel. Granting this permission can be mildly dangerous since a device reading an unwanted message out loud can be risky.",
                            Name = "Send Text-to-Speech Messages"
                        },
                        new
                        {
                            Id = 30m,
                            Description = "Allows the permission to use application commands such as slash commands and right-click menu buttons. It’s normal to grant this permission to everyone since most commands and application functions are public-intended; users won’t be able to use a command that isn’t public (only available to staff).",
                            Name = "Use Application Commands"
                        },
                        new
                        {
                            Id = 31m,
                            Description = "Allows the permission to send voice messages to the channels they can see using mobile devices. Discord introduced the voice message feature in April 2024. Granting this permission can be mildly dangerous since there’s currently no automatic moderation on voice messages, and ill-intended users can send unwanted voice messages.",
                            Name = "Send Voice Messages"
                        },
                        new
                        {
                            Id = 32m,
                            Description = "Allows the permission to join voice channels they can see. It’s normal to grant this permission to everyone. One common reason not to grant this permission is to block newcomers from joining voice channels, preventing a potential voice raid. The system most servers use in this case is once the user spends a certain amount of time, they’ll get a new role (via a bot or manually) that has Connect permission.",
                            Name = "Connect"
                        },
                        new
                        {
                            Id = 33m,
                            Description = "Allows the permission to speak in voice channels. If a user doesn’t have this permission, they will be muted upon joining a voice channel. There are two ways they can talk: they get the Speak permission, or a user with Mute Members permission unmutes them. It’s normal to grant this permission to everyone.",
                            Name = "Speak"
                        },
                        new
                        {
                            Id = 34m,
                            Description = "Allows the role to turn on their camera and screen share in voice channels. While it’s normal to grant this permission to everyone, it can be mildly dangerous since there’s no automatic moderation system for video calls and screen sharing, allowing ill-intended users to display unwanted content.",
                            Name = "Video"
                        },
                        new
                        {
                            Id = 35m,
                            Description = "Allows the role to use the Activities feature. Activities are games and apps (like YouTube Watch Together, Blazing 8s, Gartic Phone, etc.) that are integrated into voice channels. It’s normal to grant this permission to everyone.",
                            Name = "Use Activities"
                        },
                        new
                        {
                            Id = 36m,
                            Description = "Allows the role to use sounds from the Soundboard in voice channels. Granting this permission can be mildly dangerous since users can disturb other members by playing or spamming loud or unwanted sounds in voice channels.",
                            Name = "Use Soundboard"
                        },
                        new
                        {
                            Id = 37m,
                            Description = "Allows the role to use soundboards of other servers in voice channels. Granting this permission can be mildly dangerous since other servers might have ill-intended sounds.",
                            Name = "Use External Sounds"
                        },
                        new
                        {
                            Id = 38m,
                            Description = "Allows the role to speak without Push-to-talk. Users who don’t have this permission will have to use push-to-talk to speak in voice channels.",
                            Name = "Use Voice Activity"
                        },
                        new
                        {
                            Id = 39m,
                            Description = "Allows the role to use the “Push to Talk (Priority)” keybind, which lowers the other users’ voice channel volume when pressed, thus allowing the user to be easily heard. While this permission isn’t risky to grant, usually only staff roles are granted.",
                            Name = "Priority Speaker"
                        },
                        new
                        {
                            Id = 40m,
                            Description = "Allows the role to mute other users in voice channels so they won’t be able to speak. It’s a common misconception that this permission allows users to mute others in the sense that they won’t be able to send messages; this is not the case. Users need the Timeout Members permission to mute others (prevent them from sending messages.) Granting this permission can be dangerous since it allows users to prevent others from speaking in voice channels.",
                            Name = "Mute Members"
                        },
                        new
                        {
                            Id = 41m,
                            Description = "Allows the role to deafen other users in voice channels so they won’t be able to hear other users. Deafened users can still speak. Granting this permission can be dangerous since it allows users to prevent others from hearing others in voice channels.",
                            Name = "Deafen Members"
                        },
                        new
                        {
                            Id = 42m,
                            Description = "Allows the role to move members between voice channels. The user with the permission can also join voice channels even if they’re at full capacity. They can also move members into voice channels that are at full capacity. Granting this permission can be dangerous since it allows users to move each other between voice channels, potentially disturbing conversations.",
                            Name = "Move Members"
                        },
                        new
                        {
                            Id = 43m,
                            Description = "Allows the role to adjust voice channel status. Granting this permission is mildly dangerous since users can put unwanted content in the status.",
                            Name = "Set Voice Channel Status"
                        },
                        new
                        {
                            Id = 44m,
                            Description = "Allows the role to request to speak in stage channels. Members who request to speak can be approved or denied by moderators. It’s normal to grant this permission to everyone.",
                            Name = "Request to Speak"
                        },
                        new
                        {
                            Id = 45m,
                            Description = "Allows the role to create events. Granting this permission is dangerous since users can flood the server with all kinds of events.",
                            Name = "Create Events"
                        },
                        new
                        {
                            Id = 46m,
                            Description = "Allows the role to edit and delete all events. Granting this permission is dangerous since users with the role can disturb the server's events.",
                            Name = "Manage Events"
                        },
                        new
                        {
                            Id = 47m,
                            Description = "Members with this permission will have every permission and will also bypass channel specific permissions or restrictions (for example, these members would get access to all private channels) **This is a dangerous permission to grant.",
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermissionCategory", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerPermissionCategory");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerProfileServerRole", b =>
                {
                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeGranted")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("AccountId", "ServerId");

                    b.ToTable("ServerProfileServerRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("AllowAnyoneToMention")
                        .HasColumnType("bit");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisplaySeperatelyFromOnlineMembers")
                        .HasColumnType("bit");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ServerRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRolePermission", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("ServerRolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UploaderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UploaderId");

                    b.ToTable("ServerEmote");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionServerURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerRegion");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Icon = "https://upload.wikimedia.org/wikipedia/commons/4/4a/Brazilian_flag_icon_round.svg",
                            Name = "Mr Worldwide",
                            RegionServerURL = "https://echo.chat/rtc/brazil/rtchub"
                        },
                        new
                        {
                            Id = 2L,
                            Icon = "https://en.wikipedia.org/wiki/St._Peter%27s_Basilica#/media/File:Basilica_di_San_Pietro_in_Vaticano_September_2015-1a.jpg",
                            Name = "holy pop",
                            RegionServerURL = "https://echo.chat/rtc/vatikanet/rtchub"
                        });
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("DefaultNotificationSettingsMode")
                        .HasColumnType("int");

                    b.Property<int>("ExplicitImageFilterMode")
                        .HasColumnType("int");

                    b.Property<decimal?>("InactiveChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("PromptMembersToReplyWithASticker")
                        .HasColumnType("bit");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Require2FAForModeratorActions")
                        .HasColumnType("bit");

                    b.Property<bool>("SendHelpfulTipsForServerSetup")
                        .HasColumnType("bit");

                    b.Property<bool>("SendRandomWelcomeMessageWhenSomeoneJoins")
                        .HasColumnType("bit");

                    b.Property<string>("ServerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowMembersInChannelList")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SystemMessagesChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("VerificationLevelMode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSoundboardSound", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("AssociatedEmoteId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("SoundFileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UploaderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedEmoteId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UploaderId");

                    b.ToTable("ServerSoundboardSound");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerWebhook", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("TextChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("WebhookEndpointURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("ServerWebhook");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Colour")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.HasKey("Id", "Name");

                    b.ToTable("AccountServerFolder");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SecurityCredentials");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PasswordSetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("CustomStatusReportCustomStatusReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("CustomStatusReportCustomStatusReportReason");
                });

            modelBuilder.Entity("FeedbackReportFeedbackReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("FeedbackReportFeedbackReportReason");
                });

            modelBuilder.Entity("MessageReportMessageReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("MessageReportMessageReportReason");
                });

            modelBuilder.Entity("ProfileReportProfileReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("ProfileReportProfileReportReason");
                });

            modelBuilder.Entity("BugReportBugReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", "ActivityStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.UserCore.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.Account", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountAccountVolume", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Owner")
                        .WithMany("PersonalAccountVolumes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountBlock", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Blocked")
                        .WithMany()
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Blocker")
                        .WithMany("BlockedAccounts")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountConnection", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Connections")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ConnectionType", "ConnectionType")
                        .WithMany("AccountConnections")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ConnectionType");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne("CustomStatus")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountDirectMessageRelation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Owner")
                        .WithMany("DirectMessageRelations")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.DirectMessageRelation", "Relation")
                        .WithMany("AccountsInRelation")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedVoices")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNickname", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("NicknamedAccounts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNote", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("NotedAccounts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany("Recipients")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("MutedServers")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany()
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Subject")
                        .WithMany("Muters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountServerVoiceChannelMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("MutedVoiceChannels")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany()
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Subject")
                        .WithMany("Muters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSession", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Sessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne("Settings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Language", "Language")
                        .WithMany("AccountSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSoundboardMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedSoundboards")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountVideoMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany()
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Issuer")
                        .WithMany("IssuedViolations")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany("Violations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Issuer");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithOne("Appeal")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", "ViolationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", "Appeal")
                        .WithOne("Review")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", "AppealId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reviewer")
                        .WithMany("ReviewedAppeals")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Appeal");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.DirectMessageRelation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Chat")
                        .WithOne("DirectMessageRelation")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.DirectMessageRelation", "ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.ServerTextChannelMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedTextChannels")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Subject")
                        .WithMany("Muters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Keybind", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.ApplicationKeybind", "ApplicationKeybind")
                        .WithMany("Keybinds")
                        .HasForeignKey("ApplicationKeybindId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", "KeybindSettings")
                        .WithMany("Keybinds")
                        .HasForeignKey("KeybindSettingsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ApplicationKeybind");

                    b.Navigation("KeybindSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.RolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AccessibilitySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AccessibilitySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AccessibilitySettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ActivitySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("ActivitySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ActivitySettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AdvancedSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AdvancedSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AdvancedSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AppearanceSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AppearanceSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.AppearanceSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Theme", "Theme")
                        .WithMany("AppearanceSettings")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ChatSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("ChatSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.ChatSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.FriendRequestSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("FriendRequestSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.FriendRequestSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.GameOverlaySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("GameOverlaySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.GameOverlaySettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("KeybindSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.NotificationSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("NotificationSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.NotificationSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.PrivacySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("PrivacySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.PrivacySettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.SoundboardSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("SoundboardSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.SoundboardSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.StreamerModeSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("StreamerModeSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.StreamerModeSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VideoSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("VideoSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VideoSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VoiceSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("VoiceSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.VoiceSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.WindowSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("WindowSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.Settings.WindowSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("BillingInformation")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", "BillingInformation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("BillingInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", "Currency")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingInformation");

                    b.Navigation("Currency");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionActivePeriod", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", "TransactionGroup")
                        .WithMany("ActivePeriods")
                        .HasForeignKey("TransactionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("TransactionGroup");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlanActivePeriod", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("ActivePeriods")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransaction", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionRefund", "Refund")
                        .WithOne("Transaction")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransaction", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", "Subscription")
                        .WithMany("SubcriptionTransactions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", "TransactionGroup")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Refund");

                    b.Navigation("Subscription");

                    b.Navigation("TransactionGroup");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", "Currency")
                        .WithMany("TransactionGroups")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatAccountMessageTracker", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "CoOwner")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("CoOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Owner")
                        .WithMany("ChatMessageTrackers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Subject")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CoOwner");

                    b.Navigation("Owner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatInvite", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Inviter")
                        .WithMany("ChatInvites")
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany("Invites")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ChatMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "MessageHolder")
                        .WithMany("Messages")
                        .HasForeignKey("MessageHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("MessageHolder");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Message")
                        .WithOne("MessagePin")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Pinboard")
                        .WithMany("PinnedMessages")
                        .HasForeignKey("PinboardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Pinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedChats")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany("Mutes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatParticipancy", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Participant")
                        .WithMany("Chats")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany("Participants")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendSuggestion", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Receiver")
                        .WithMany("FriendSuggestions")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Suggestion")
                        .WithMany()
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendshipParticipancy", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Participant")
                        .WithMany("Friendships")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.FriendCore.Friendship", "Subject")
                        .WithMany("Participants")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Receiver")
                        .WithMany("IncomingFriendRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", "SenderRequest")
                        .WithOne("ReceiverRequest")
                        .HasForeignKey("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", "SenderRequestId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("SenderRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Sender")
                        .WithMany("OutgoingFriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.PaymentMethod", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Country", "Country")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", "BillingInformation")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", "Type")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BillingInformation");

                    b.Navigation("Country");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("CustomStatusReports")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedCustomStatusReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("ReportedCustomStatuses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("MessageReports")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedMessageReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ReportedMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("ProfileReports")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedProfileReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("ReportedProfiles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("ChannelCategories")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("CategoryMemberPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("ChannelCategoryMemberPermissions")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", "MemberSettings")
                        .WithMany("Permissions")
                        .HasForeignKey("AccountId", "ChannelCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("CategoryMemberPermissions")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChannelCategory");

                    b.Navigation("MemberSettings");

                    b.Navigation("Permission");

                    b.Navigation("Profile");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany("MemberSettings")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", null)
                        .WithMany("CategoryMemberSettings")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("ChannelCategoryMemberSettings")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("CategoryMemberSettings")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ChannelCategory");

                    b.Navigation("Profile");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany("AllowedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChannelCategory");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany()
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("ChannelCategoryRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", null)
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ServerChannelCategoryId");

                    b.Navigation("ChannelCategory");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "ChannelCategory")
                        .WithMany()
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("CategoryRolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("ChannelCategoryRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("ServerChannelCategoryId");

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", "ChannelCategoryRole")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelCategoryId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChannelCategory");

                    b.Navigation("ChannelCategoryRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "Category")
                        .WithMany("TextChannels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Owner")
                        .WithMany("TextChannels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("TextChannelMemberPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("TextChannelMemberPermissions")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("TextChannelMemberPermissions")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", "MemberSettings")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("MemberSettings");

                    b.Navigation("Permission");

                    b.Navigation("Profile");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("MemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", null)
                        .WithMany("TextChannelMemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("TextChannelMemberSettings")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("TextChannelMemberSettings")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Channel");

                    b.Navigation("Profile");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("AllowedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("RoleSettings")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("TextChannelRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("TextChannelRolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("TextChannelRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", "ChannelRole")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", "Category")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Owner")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", "Region")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("VoiceChannelMemberPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("VoiceChannelMemberPermissions")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("VoiceChannelMemberPermissions")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", "MemberSettings")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("MemberSettings");

                    b.Navigation("Permission");

                    b.Navigation("Profile");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("MemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", null)
                        .WithMany("VoiceChannelMemberSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("VoiceChannelMemberSettings")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("VoiceChannelMemberSettings")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Channel");

                    b.Navigation("Profile");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("AllowedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("AllowedRoles")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("VoiceChannelRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("ServerVoiceChannelRolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("VoiceChannelRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", "ChannelRole")
                        .WithMany("Permissions")
                        .HasForeignKey("ChannelId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelAccountMessageTracker", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "CoOwner")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("CoOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Owner")
                        .WithMany("TextChannelMessageTrackers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Subject")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CoOwner");

                    b.Navigation("Owner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ChannelMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "MessageHolder")
                        .WithMany("Messages")
                        .HasForeignKey("MessageHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("MessageHolder");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessagePin", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", "Message")
                        .WithOne("MessagePin")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessagePin", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Pinboard")
                        .WithMany("PinnedMessages")
                        .HasForeignKey("PinboardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Pinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.VoiceChannel.ServerVoiceInvite", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "Channel")
                        .WithMany("VoiceInvites")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Inviter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerEvent", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Creator")
                        .WithMany("ServerEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("Events")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerInvite", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", null)
                        .WithMany("ServerInvites")
                        .HasForeignKey("AccountId");

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "Channel")
                        .WithMany("Invites")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Subject")
                        .WithMany("Invites")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Inviter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Servers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", "Folder")
                        .WithMany("Servers")
                        .HasForeignKey("FolderId", "FolderName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Folder");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerAuditLog", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ModerationCore.ServerBan", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("BanList")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermissionCategory", "Category")
                        .WithMany("Permissions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerProfileServerRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("Recipients")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", "Profile")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId", "ServerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Owner")
                        .WithMany("Roles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("Emotes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "SystemMessagesChannel")
                        .WithOne("ServerSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", "Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", "InactiveChannel")
                        .WithOne("ServerSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", "Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithOne("Settings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSettings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", "Region")
                        .WithMany("ServerSettings")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InactiveChannel");

                    b.Navigation("Region");

                    b.Navigation("Server");

                    b.Navigation("SystemMessagesChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerSoundboardSound", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", "AssociatedEmote")
                        .WithMany("SoundboardSounds")
                        .HasForeignKey("AssociatedEmoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany("SoundboardSounds")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssociatedEmote");

                    b.Navigation("Server");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerWebhook", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", "TextChannel")
                        .WithMany("Webhooks")
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("TextChannel");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Folders")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.UserCore.User", "User")
                        .WithOne("SecurityCredentials")
                        .HasForeignKey("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomStatusReportCustomStatusReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeedbackReportFeedbackReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageReportMessageReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfileReportProfileReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.Navigation("BlockedAccounts");

                    b.Navigation("ChannelMessages");

                    b.Navigation("ChatInvites");

                    b.Navigation("ChatMessageTrackers");

                    b.Navigation("ChatMessages");

                    b.Navigation("Chats");

                    b.Navigation("Connections");

                    b.Navigation("CustomStatus");

                    b.Navigation("CustomStatusReports");

                    b.Navigation("DirectMessageRelations");

                    b.Navigation("Folders");

                    b.Navigation("FriendSuggestions");

                    b.Navigation("Friendships");

                    b.Navigation("IncomingFriendRequests");

                    b.Navigation("IssuedViolations");

                    b.Navigation("MessageReports");

                    b.Navigation("MutedChats");

                    b.Navigation("MutedServers");

                    b.Navigation("MutedSoundboards");

                    b.Navigation("MutedTextChannels");

                    b.Navigation("MutedVoiceChannels");

                    b.Navigation("MutedVoices");

                    b.Navigation("NicknamedAccounts");

                    b.Navigation("NotedAccounts");

                    b.Navigation("OutgoingFriendRequests");

                    b.Navigation("PersonalAccountVolumes");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ProfileReports");

                    b.Navigation("ReportedCustomStatuses");

                    b.Navigation("ReportedMessages");

                    b.Navigation("ReportedProfiles");

                    b.Navigation("ReviewedAppeals");

                    b.Navigation("Roles");

                    b.Navigation("ServerEvents");

                    b.Navigation("ServerInvites");

                    b.Navigation("Servers");

                    b.Navigation("Sessions");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("TextChannelMessageTrackers");

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.Navigation("AccessibilitySettings")
                        .IsRequired();

                    b.Navigation("ActivitySettings")
                        .IsRequired();

                    b.Navigation("AdvancedSettings")
                        .IsRequired();

                    b.Navigation("AppearanceSettings")
                        .IsRequired();

                    b.Navigation("BillingInformation")
                        .IsRequired();

                    b.Navigation("ChatSettings")
                        .IsRequired();

                    b.Navigation("FriendRequestSettings")
                        .IsRequired();

                    b.Navigation("GameOverlaySettings")
                        .IsRequired();

                    b.Navigation("KeybindSettings")
                        .IsRequired();

                    b.Navigation("NotificationSettings")
                        .IsRequired();

                    b.Navigation("PrivacySettings")
                        .IsRequired();

                    b.Navigation("SoundboardSettings")
                        .IsRequired();

                    b.Navigation("StreamerModeSettings")
                        .IsRequired();

                    b.Navigation("VideoSettings")
                        .IsRequired();

                    b.Navigation("VoiceSettings")
                        .IsRequired();

                    b.Navigation("WindowSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.Navigation("Appeal");

                    b.Navigation("ConsumedCustomStatusReports");

                    b.Navigation("ConsumedMessageReports");

                    b.Navigation("ConsumedProfileReports");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.DirectMessageRelation", b =>
                {
                    b.Navigation("AccountsInRelation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AcceptedCurrency", b =>
                {
                    b.Navigation("Subscriptions");

                    b.Navigation("TransactionGroups");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ApplicationKeybind", b =>
                {
                    b.Navigation("Keybinds");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Country", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Language", b =>
                {
                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.PaymentType", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Role", b =>
                {
                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Settings.KeybindSettings", b =>
                {
                    b.Navigation("Keybinds");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SettingsCore.BillingInformation", b =>
                {
                    b.Navigation("PaymentMethods");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.Subscription", b =>
                {
                    b.Navigation("SubcriptionTransactions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionPlan", b =>
                {
                    b.Navigation("ActivePeriods");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionGroup", b =>
                {
                    b.Navigation("ActivePeriods");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SubscriptionCore.SubscriptionTransactionRefund", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Theme", b =>
                {
                    b.Navigation("AppearanceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.Chat", b =>
                {
                    b.Navigation("DirectMessageRelation");

                    b.Navigation("Invites");

                    b.Navigation("MessageTrackers");

                    b.Navigation("Messages");

                    b.Navigation("Mutes");

                    b.Navigation("Participants");

                    b.Navigation("PinnedMessages");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Children");

                    b.Navigation("MessagePin");

                    b.Navigation("MessageTrackers");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ConnectionType", b =>
                {
                    b.Navigation("AccountConnections");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.Friendship", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.Navigation("ReceiverRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategory", b =>
                {
                    b.Navigation("AllowedPermissions");

                    b.Navigation("AllowedRoles");

                    b.Navigation("MemberPermissions");

                    b.Navigation("MemberSettings");

                    b.Navigation("RolePermissions");

                    b.Navigation("TextChannels");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryMemberSettings", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.Category.ServerChannelCategoryRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannel", b =>
                {
                    b.Navigation("AllowedPermissions");

                    b.Navigation("Invites");

                    b.Navigation("MemberPermissions");

                    b.Navigation("MemberSettings");

                    b.Navigation("MessageTrackers");

                    b.Navigation("Messages");

                    b.Navigation("Muters");

                    b.Navigation("PinnedMessages");

                    b.Navigation("RolePermissions");

                    b.Navigation("RoleSettings");

                    b.Navigation("ServerSettings");

                    b.Navigation("Webhooks");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelMemberSettings", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerTextChannelRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannel", b =>
                {
                    b.Navigation("AllowedPermissions");

                    b.Navigation("AllowedRoles");

                    b.Navigation("MemberPermissions");

                    b.Navigation("MemberSettings");

                    b.Navigation("Muters");

                    b.Navigation("RolePermissions");

                    b.Navigation("ServerSettings");

                    b.Navigation("VoiceInvites");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelMemberSettings", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.ServerVoiceChannelRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.ChannelCore.TextChannel.ServerTextChannelMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Children");

                    b.Navigation("MessagePin");

                    b.Navigation("MessageTrackers");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.ManagementCore.ServerProfile", b =>
                {
                    b.Navigation("CategoryMemberPermissions");

                    b.Navigation("CategoryMemberSettings");

                    b.Navigation("Roles");

                    b.Navigation("TextChannelMemberPermissions");

                    b.Navigation("TextChannelMemberSettings");

                    b.Navigation("VoiceChannelMemberPermissions");

                    b.Navigation("VoiceChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermission", b =>
                {
                    b.Navigation("CategoryMemberPermissions");

                    b.Navigation("CategoryMemberSettings");

                    b.Navigation("CategoryRolePermissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("ServerVoiceChannelRolePermissions");

                    b.Navigation("TextChannelMemberPermissions");

                    b.Navigation("TextChannelMemberSettings");

                    b.Navigation("TextChannelRolePermissions");

                    b.Navigation("VoiceChannelMemberPermissions");

                    b.Navigation("VoiceChannelMemberSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerPermissionCategory", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.RoleCore.ServerRole", b =>
                {
                    b.Navigation("ChannelCategoryRolePermissions");

                    b.Navigation("ChannelCategoryRoles");

                    b.Navigation("Permissions");

                    b.Navigation("Recipients");

                    b.Navigation("TextChannelRolePermissions");

                    b.Navigation("TextChannelRoles");

                    b.Navigation("VoiceChannelRolePermissions");

                    b.Navigation("VoiceChannelRoles");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.Server", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BanList");

                    b.Navigation("ChannelCategories");

                    b.Navigation("ChannelCategoryMemberPermissions");

                    b.Navigation("ChannelCategoryMemberSettings");

                    b.Navigation("Emotes");

                    b.Navigation("Events");

                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("Muters");

                    b.Navigation("Roles");

                    b.Navigation("Settings");

                    b.Navigation("SoundboardSounds");

                    b.Navigation("TextChannelMemberPermissions");

                    b.Navigation("TextChannelMemberSettings");

                    b.Navigation("TextChannels");

                    b.Navigation("VoiceChannelMemberPermissions");

                    b.Navigation("VoiceChannelMemberSettings");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerEmote", b =>
                {
                    b.Navigation("SoundboardSounds");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.GeneralCore.SettingsCore.ServerRegion", b =>
                {
                    b.Navigation("ServerSettings");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ServerCore.Management.AccountServerFolder", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("SecurityCredentials");
                });
#pragma warning restore 612, 618
        }
    }
}
