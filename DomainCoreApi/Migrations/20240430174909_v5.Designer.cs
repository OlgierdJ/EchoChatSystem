// <auto-generated />
using System;
using DomainCoreApi.EFCORE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DomainCoreApi.Migrations
{
    [DbContext(typeof(EchoDbContext))]
    [Migration("20240430174909_v5")]
    partial class v5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BugReportBugReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("BugReportBugReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte>("ActivityStatusId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("CustomStatusId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("TimeLastLogon")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("CustomStatusId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IconColor")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AccountActivityStatus");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountBlock", b =>
                {
                    b.Property<decimal>("BlockerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("BlockedId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("BlockerId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("AccountBlock");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountConnection", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("ExternalProvider")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ExternalToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("InternalProvider")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("InternalToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountConnection");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("CustomMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountCustomStatus");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNickname", b =>
                {
                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("AuthorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountNickname");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNote", b =>
                {
                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("AuthorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountNote");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("About")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AvatarFileURL")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BannerColor")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountRole", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("RoleId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSession", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TimeStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("TimeStopped")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountSession");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("LanguageId");

                    b.ToTable("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSoundboardMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountSoundboardMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IssuerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AccountViolation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ViolationId")
                        .IsUnique();

                    b.ToTable("AccountViolationAppeal");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AppealId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<decimal>("ReviewerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AppealId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.ToTable("AccountViolationAppealReview");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AccessibilitySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowTextToSpeech")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysUnderlineLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplySaturationToCustomColors")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoPlayGIFsOnAppFocus")
                        .HasColumnType("bit");

                    b.Property<bool>("PlayAnimatedEmojis")
                        .HasColumnType("bit");

                    b.Property<bool>("ReducedMotion")
                        .HasColumnType("bit");

                    b.Property<int>("RoleColorMode")
                        .HasColumnType("int");

                    b.Property<byte>("SaturationPercent")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowSendMessageButton")
                        .HasColumnType("bit");

                    b.Property<int>("StickerAnimationMode")
                        .HasColumnType("int");

                    b.Property<bool>("SyncContrastSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("SyncProfileTheme")
                        .HasColumnType("bit");

                    b.Property<bool>("SyncReducedMotionWithPC")
                        .HasColumnType("bit");

                    b.Property<byte>("TextToSpeechRate")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("AccessibilitySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ActivitySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AllowFriendsToJoinGame")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowVoiceChannelParticipantsToJoinGame")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayCurrentActivityAsAStatusMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareActivityStatusOnLargeServerJoin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("ActivitySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AdvancedSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AutoNavigateServerHome")
                        .HasColumnType("bit");

                    b.Property<bool>("DeveloperMode")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("AdvancedSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AppearanceSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("DarkSideBar")
                        .HasColumnType("bit");

                    b.Property<string>("InAppIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PixelChatFontScale")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PixelGroupSpaceScale")
                        .HasColumnType("tinyint");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.HasIndex("ThemeId");

                    b.ToTable("AppearanceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.BillingInformation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("BillingInformation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ChatSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("ChatSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.FriendRequestSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Everyone")
                        .HasColumnType("bit");

                    b.Property<bool>("FriendsOfFriends")
                        .HasColumnType("bit");

                    b.Property<bool>("ServerMembers")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("FriendRequestSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.KeybindSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("KeybindSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.NotificationSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("DesktopNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusModeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("TaskbarFlashing")
                        .HasColumnType("bit");

                    b.Property<bool>("UnreadMessageBadge")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Permission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.PrivacySettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("DMFromFriends")
                        .HasColumnType("int");

                    b.Property<int>("DMFromServerChatroom")
                        .HasColumnType("int");

                    b.Property<int>("DMFromUnknownUsers")
                        .HasColumnType("int");

                    b.Property<int>("DMSpamFilter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.RolePermission", b =>
                {
                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SoundboardSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("Soundboard")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("SoundboardVolume")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("SoundboardSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.StreamerModeSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("DisableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableSounds")
                        .HasColumnType("bit");

                    b.Property<bool>("HideInviteLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("HidePersonalInformation")
                        .HasColumnType("bit");

                    b.Property<bool>("StreamerMode")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("StreamerModeSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.VideoSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AlwaysPreviewVideo")
                        .HasColumnType("bit");

                    b.Property<string>("CameraDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("VideoSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.VoiceSettings", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountSettingsId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("AdvancedVoiceActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("AutomaticGainControl")
                        .HasColumnType("bit");

                    b.Property<bool>("EchoCancellation")
                        .HasColumnType("bit");

                    b.Property<string>("InputDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputMode")
                        .HasColumnType("int");

                    b.Property<byte>("InputSensitivity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("InputVolume")
                        .HasColumnType("tinyint");

                    b.Property<int>("NoiseSuppression")
                        .HasColumnType("int");

                    b.Property<string>("OutputDevice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("OutputVolume")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountSettingsId")
                        .IsUnique();

                    b.ToTable("VoiceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.Chat", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatAccountMessageTracker", b =>
                {
                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CoOwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("OwnerId", "CoOwnerId");

                    b.HasIndex("CoOwnerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatAccountMessageTracker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatInvite", b =>
                {
                    b.Property<string>("InviteCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InviterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("TotalUses")
                        .HasColumnType("int");

                    b.HasKey("InviteCode");

                    b.HasIndex("InviterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatInvite");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageHolderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MessageHolderId");

                    b.HasIndex("ParentId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ChatMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", b =>
                {
                    b.Property<decimal>("PinboardId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("PinboardId", "MessageId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("ChatMessagePin");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMute", b =>
                {
                    b.Property<decimal>("MuterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("MuterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatMute");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatParticipancy", b =>
                {
                    b.Property<decimal>("ParticipantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ParticipantId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ChatParticipancy");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("ChatPinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendSuggestion", b =>
                {
                    b.Property<decimal>("ReceiverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SuggestionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeSuggested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ReceiverId", "SuggestionId");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("ReceiverId", "SuggestionId")
                        .IsUnique();

                    b.ToTable("FriendSuggestion");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.Friendship", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendshipParticipancy", b =>
                {
                    b.Property<decimal>("ParticipantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ParticipantId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("FriendshipParticipancy");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("ReceiverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SenderRequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderRequestId")
                        .IsUnique();

                    b.ToTable("IncomingFriendRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("SenderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("OutgoingFriendRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.PaymentMethod", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("BillingInformationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("BillingInformationId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("BugReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BugReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("CustomStatusReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomStatusReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CustomMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ReportedCustomStatus");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("FeedbackReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("MessageReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ReportedMessage");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessageAttachment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ReportedMessageAttachment");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SubjectId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TimeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("ViolationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("ViolationId");

                    b.ToTable("ProfileReport");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReportReason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfileReportReason");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AvatarFileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ReportedProfile");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SecurityCredentials");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PasswordSetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CustomStatusReportCustomStatusReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("CustomStatusReportCustomStatusReportReason");
                });

            modelBuilder.Entity("FeedbackReportFeedbackReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("FeedbackReportFeedbackReportReason");
                });

            modelBuilder.Entity("MessageReportMessageReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("MessageReportMessageReportReason");
                });

            modelBuilder.Entity("ProfileReportProfileReportReason", b =>
                {
                    b.Property<byte>("ReasonsId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ReportsId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ReasonsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("ProfileReportProfileReportReason");
                });

            modelBuilder.Entity("BugReportBugReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", "ActivityStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", "CustomStatus")
                        .WithOne("Account")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.Account", "CustomStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.UserCore.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.Account", "UserId");

                    b.Navigation("ActivityStatus");

                    b.Navigation("CustomStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountBlock", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Blocked")
                        .WithMany()
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Blocker")
                        .WithMany("BlockedAccounts")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountConnection", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Connections")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedVoices")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNickname", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("NicknamedAccounts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountNote", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("NotedAccounts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountProfile", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountRole", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSession", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("Sessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithOne("Settings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Language", "Language")
                        .WithMany("AccountSettings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSoundboardMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedSoundboards")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Issuer")
                        .WithMany("IssuedViolations")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Subject")
                        .WithMany("Violations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Issuer");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithOne("Appeal")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", "ViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", "Appeal")
                        .WithOne("Review")
                        .HasForeignKey("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppealReview", "AppealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reviewer")
                        .WithMany("ReviewedAppeals")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appeal");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AccessibilitySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AccessibilitySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.AccessibilitySettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ActivitySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("ActivitySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.ActivitySettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AdvancedSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AdvancedSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.AdvancedSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.AppearanceSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("AppearanceSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.AppearanceSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Theme", "Theme")
                        .WithMany("AppearanceSettings")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.BillingInformation", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("BillingInformation")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.BillingInformation", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.ChatSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("ChatSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.ChatSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.FriendRequestSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("FriendRequestSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.FriendRequestSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.KeybindSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("KeybindSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.KeybindSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.NotificationSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("NotificationSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.NotificationSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.PrivacySettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("PrivacySettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.PrivacySettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.RolePermission", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.SoundboardSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("SoundboardSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.SoundboardSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.StreamerModeSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("StreamerModeSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.StreamerModeSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.VideoSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("VideoSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.VideoSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.VoiceSettings", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", "AccountSettings")
                        .WithOne("VoiceSettings")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ApplicationCore.VoiceSettings", "AccountSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatAccountMessageTracker", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "CoOwner")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("CoOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Owner")
                        .WithMany("ChatMessageTrackers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Subject")
                        .WithMany("MessageTrackers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CoOwner");

                    b.Navigation("Owner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatInvite", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Inviter")
                        .WithMany("ChatInvites")
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany("Invites")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Inviter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ChatMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "MessageHolder")
                        .WithMany("Messages")
                        .HasForeignKey("MessageHolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("MessageHolder");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", "Message")
                        .WithOne("MessagePin")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ChatCore.ChatMessagePin", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", "Pinboard")
                        .WithMany("PinnedMessages")
                        .HasForeignKey("PinboardId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Pinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMute", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Muter")
                        .WithMany("MutedChats")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany("Mutes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Muter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatParticipancy", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ChatCore.Chat", "Owner")
                        .WithOne("Pinboard")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendSuggestion", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Receiver")
                        .WithMany("FriendSuggestions")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Suggestion")
                        .WithMany()
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.FriendshipParticipancy", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.FriendCore.Friendship", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Receiver")
                        .WithMany("IncomingFriendRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", "SenderRequest")
                        .WithOne("ReceiverRequest")
                        .HasForeignKey("CoreLib.Entities.EchoCore.FriendCore.IncomingFriendRequest", "SenderRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("SenderRequest");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Sender")
                        .WithMany("OutgoingFriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.PaymentMethod", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ApplicationCore.BillingInformation", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("BillingInformationId");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Bug.BugReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany("CustomStatusReports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedCustomStatusReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("ReportedCustomStatuses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany("MessageReports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedMessageReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Author")
                        .WithMany("ReportedMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessageAttachment", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Reporter")
                        .WithMany("ProfileReports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", "Subject")
                        .WithOne("Report")
                        .HasForeignKey("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", "SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", "Violation")
                        .WithMany("ConsumedProfileReports")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Reporter");

                    b.Navigation("Subject");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.AccountCore.Account", "Account")
                        .WithMany("ReportedProfiles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.UserCore.User", null)
                        .WithOne("SecurityCredentials")
                        .HasForeignKey("CoreLib.Entities.EchoCore.UserCore.SecurityCredentials", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomStatusReportCustomStatusReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.CustomStatusReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeedbackReportFeedbackReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Feedback.FeedbackReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageReportMessageReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Message.MessageReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfileReportProfileReportReason", b =>
                {
                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReportReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entities.EchoCore.ReportCore.Profile.ProfileReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.Account", b =>
                {
                    b.Navigation("BlockedAccounts");

                    b.Navigation("ChatInvites");

                    b.Navigation("ChatMessageTrackers");

                    b.Navigation("ChatMessages");

                    b.Navigation("Connections");

                    b.Navigation("CustomStatusReports");

                    b.Navigation("FriendSuggestions");

                    b.Navigation("IncomingFriendRequests");

                    b.Navigation("IssuedViolations");

                    b.Navigation("MessageReports");

                    b.Navigation("MutedChats");

                    b.Navigation("MutedSoundboards");

                    b.Navigation("MutedVoices");

                    b.Navigation("NicknamedAccounts");

                    b.Navigation("NotedAccounts");

                    b.Navigation("OutgoingFriendRequests");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ProfileReports");

                    b.Navigation("ReportedCustomStatuses");

                    b.Navigation("ReportedMessages");

                    b.Navigation("ReportedProfiles");

                    b.Navigation("ReviewedAppeals");

                    b.Navigation("Sessions");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountActivityStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountCustomStatus", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountSettings", b =>
                {
                    b.Navigation("AccessibilitySettings")
                        .IsRequired();

                    b.Navigation("ActivitySettings")
                        .IsRequired();

                    b.Navigation("AdvancedSettings")
                        .IsRequired();

                    b.Navigation("AppearanceSettings")
                        .IsRequired();

                    b.Navigation("BillingInformation")
                        .IsRequired();

                    b.Navigation("ChatSettings")
                        .IsRequired();

                    b.Navigation("FriendRequestSettings")
                        .IsRequired();

                    b.Navigation("KeybindSettings")
                        .IsRequired();

                    b.Navigation("NotificationSettings")
                        .IsRequired();

                    b.Navigation("PrivacySettings")
                        .IsRequired();

                    b.Navigation("SoundboardSettings")
                        .IsRequired();

                    b.Navigation("StreamerModeSettings")
                        .IsRequired();

                    b.Navigation("VideoSettings")
                        .IsRequired();

                    b.Navigation("VoiceSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolation", b =>
                {
                    b.Navigation("Appeal");

                    b.Navigation("ConsumedCustomStatusReports");

                    b.Navigation("ConsumedMessageReports");

                    b.Navigation("ConsumedProfileReports");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.AccountCore.AccountViolationAppeal", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.BillingInformation", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Language", b =>
                {
                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ApplicationCore.Theme", b =>
                {
                    b.Navigation("AppearanceSettings");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.Chat", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("MessageTrackers");

                    b.Navigation("Messages");

                    b.Navigation("Mutes");

                    b.Navigation("Pinboard");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Children");

                    b.Navigation("MessagePin");

                    b.Navigation("MessageTrackers");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ChatCore.ChatPinboard", b =>
                {
                    b.Navigation("PinnedMessages");
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.FriendCore.OutgoingFriendRequest", b =>
                {
                    b.Navigation("ReceiverRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.CustomStatus.ReportedCustomStatus", b =>
                {
                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Message.ReportedMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.ReportCore.Profile.ReportedProfile", b =>
                {
                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLib.Entities.EchoCore.UserCore.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("SecurityCredentials");
                });
#pragma warning restore 612, 618
        }
    }
}
