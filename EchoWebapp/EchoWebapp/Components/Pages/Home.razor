@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading.Channels
@using NAudio.Wave
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    private DotNetObjectReference<Home>? _objRef;

    [JSInvokable]
    public async Task RelayVoiceData(byte[] data)
    {
        if (hubConnection is not null)
        {
            var load = clientStreamData();

            await hubConnection.SendAsync("StreamToAll", load);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await BundleAndSendDotNetHelper();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task BundleAndSendDotNetHelper()
    {
        _objRef = DotNetObjectReference.Create(this);
        if (JS != null)
        {
            await JS.InvokeAsync<string>("SetDotNetHelper", _objRef);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7265/chat", opts =>
            {
                opts.AccessTokenProvider = () => Task.FromResult("aaaaBBBBccccDDDDDD");
            })
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<byte[]>("ReceiveSoundStream", async(frames) =>
       {
           if (frames != null)
           {
               try
               {
                   // Put the bytes in a memory stream
                   // var stream = new MemoryStream(frames);
                   // // // Play the audio file
                   // using var streamRef = new DotNetStreamReference(stream: stream);
                   await JS.InvokeVoidAsync("playAudio", frames);
               }
                catch (Exception e)
               {
                Console.WriteLine(e.Message); ;
                }
           }
       });

        await hubConnection.StartAsync();
    }

    async IAsyncEnumerable<byte[]> clientStreamData()
    {
        for (var i = 0; i < 5; i++)
        {
            using (WaveFileReader reader = new WaveFileReader("C:\\Users\\rrb\\Desktop\\byebye.wav"))
            {
                // Assert.AreEqual(16, reader.WaveFormat.BitsPerSample, "Only works with 16 bit audio");
                byte[] buffer = new byte[reader.Length];
                int read = reader.Read(buffer, 0, buffer.Length);
                short[] sampleBuffer = new short[read / 2];
                Buffer.BlockCopy(buffer, 0, sampleBuffer, 0, read);
                yield return buffer;
            }

            // using StreamReader reader = File.OpenText("C:\\Users\\rrb\\Desktop\\byebye.wav");
            // while (!reader.EndOfStream)
            //     yield return await reader.ReadLineAsync();
            // using FileStream stream = File.OpenRead("C:\\Users\\rrb\\Desktop\\sample.mp3");
            // while (!stream.EndOfStream)
            //     yield return await stream.read();
        }
        //After the for loop has completed and the local function exits the stream completion will be sent.
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            var load = clientStreamData();
            // var results = new List<byte[]>();
            // await foreach (var item in load.WithCancellation(default).ConfigureAwait(false))
            // {
            //   results.Add(item);
            // }
           
            await hubConnection.SendAsync("StreamToAll", load);
            // var channel = Channel.CreateBounded<string>(10);
            // await hubConnection.SendAsync("StreamToAll", channel.Reader);
            // await channel.Writer.WriteAsync("some data");
            // await channel.Writer.WriteAsync("some more data");
            // channel.Writer.Complete();
        }
    }
  
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        _objRef?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}