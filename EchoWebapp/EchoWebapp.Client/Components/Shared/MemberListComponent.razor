@inject IUserContainer SessionRepository
@implements IDisposable
@inject IJSRuntime _js

@*
    Layout for a memberlist that exists within a chatviewcomponent and a textchannelviewcomponent.

    This component holds all members related to the chat or textchannel.

    It should group members according to their role.
*@
<div style="display: @(Visible ? "block" : "none");">
    @if (Members.Count != 0)
    {
        <MudPaper Class="overflow-auto d-flex align-content-start flex-wrap flex-grow-1 gap-4" Width="20vw" Height="92vh" Elevation="0" Square Style="background: var(--mud-palette-dark);">
             @if (Members.Where(e => e.ActiveStatus.Id != 4 && e.ActiveStatus.Id != 5).Count() > 0)
            {
                <MudPaper Elevation="0" Style=@($"background:{Colors.Shades.Transparent}")>
                    <MudText Class="pl-2" Typo="Typo.button">ONLINE - @(Members.Where(e => e.GroupingName == "ONLINE").Count())</MudText>
                    @if (Online != null)
                    {
                        @foreach (MemberDTO m in Online)
                        {
                            <MudList>
                                <MudListItem Class="cursor-pointer hoverable ma-0 pa-0">
                                    <MemberComponent Member="m" />
                                </MudListItem>
                            </MudList>
                        }
                    }
                </MudPaper>
            }

            @if (Members.Where(e => e.ActiveStatus.Id == 4 || e.ActiveStatus.Id == 5).Count() > 0)
            {
                <MudPaper Elevation="0" Style=@($"background:{Colors.Shades.Transparent}")>
                    <MudText Class="pl-2" Typo="Typo.button">OFFLINE - @(Members.Where(e => e.GroupingName == "OFFLINE").Count())</MudText>
                    @if (Offline != null)
                    {
                        @foreach (MemberDTO m in Offline)
                        {
                            <MudList>
                                <MudListItem Class="cursor-pointer hoverable ma-0 pa-0">
                                    <MemberComponent Member="m" />
                                </MudListItem>
                            </MudList>
                        }
                    }
                </MudPaper>
            }
        </MudPaper>
    }

</div>

@code {
    [Parameter]
    public bool Visible { get; set; } = true;
    public ICollection<MemberDTO> Offline { get; set; }
    public ICollection<MemberDTO> Online { get; set; }

    [Parameter]
    public ICollection<MemberDTO> Members { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Online = Members.Where(e => e.GroupingName == "ONLINE").ToList();
        Offline = Members.Where(e => e.GroupingName == "OFFLINE").ToList();

        _js.InvokeVoidAsync("console.log", Online);
        SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
        StateHasChanged();
        return base.OnParametersSetAsync();
    }
    public void Dispose()
    {
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }
    private async void SessionRepository_SessionChangeOccured()
    {
        await InvokeAsync(StateHasChanged);
    }
    // protected override Task OnInitializedAsync()
    // {

    //     return base.OnInitializedAsync();
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //     }

    //     await base.OnAfterRenderAsync(firstRender);
    // }
}