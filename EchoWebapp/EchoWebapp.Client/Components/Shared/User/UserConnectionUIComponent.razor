@using CoreLib.DTO.EchoCore.ChatCore.TextCore
@using CoreLib.DTO.EchoCore.UserCore
@using EchoWebapp.Client.Pages
@inject NavigationManager nav
@inject ILocalStorageService LocalStorage
@inject Provider.AccountIdContainer AccountContainer

@*
    Layout for a UserConnectionUIcomponent that exists within the indexcomponent.

    This component allows for quick access to disconnect from call, stream, enable cam, soundboard functionality,
    as well as mute self, deafen self, change activity status, custom status and navigate to user settings.
*@
<div class="d-flex">
    <MudPaper Width="12vw" Height="10vh" Square Style="background: var(--mud-palette-dark);">
         <MudListItem Dense="true">
             <MudPaper Class="d-flex align-content-center" Square Style="@($"background:{Colors.Shades.Transparent};")" Elevation="0">
                 <Popup @ref=popup />
                 <div class="d-flex align-content-center flex-wrap flex-grow-1 gap-2 pa-2 flex-0 cursor-pointer hoverable" @onclick="OpenProfile">

                     <MudBadge Color="Color.Success" Bordered Overlap="true" Origin="Origin.BottomRight">
                         <MudImage Src="@account.ImageIconURL" Height="32" Width="32" ObjectFit="ObjectFit.Cover" Class="rounded-circle mt-1 ml-1" />
                     </MudBadge>

                     <MudPaper Class="d-flex flex-column flex-gap-0 flex-1 ml-1" Elevation="0" Style="@($"background:{Colors.Shades.Transparent};")" Square>
                        <MudText Typo="Typo.caption">@account.DisplayName</MudText>
                            <MudText Typo="Typo.caption">@account.ActiveStatus?.DisplayedContent</MudText>
                        </MudPaper>
                    </div>
                    <style>
                        .hoverable:hover {
                            background: rgba(255,255,255,0.1)
                        }
                    </style>

                    <MudPaper Class="d-flex flex-grow-1 gap-2 flex-1" Square Style="@($"background:{Colors.Shades.Transparent};")" Elevation="0">
                     <MudIconButton Size="Size.Small" Icon=@($"{(!mute ? @Icons.Material.Filled.Mic : @Icons.Material.Filled.MicOff)}") Color=@(!mute ? Color.Default : Color.Error) OnClick="ToggleMute" />
                     <MudIconButton Size="Size.Small" Icon=@($"{(!deaf ? @Icons.Material.Filled.Headset : @Icons.Material.Filled.HeadsetOff)}") Color=@(!deaf ? Color.Default : Color.Error) OnClick=" ToggleDeaf" />
                     <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Settings" OnClick="ToggleSettings" />
                 </MudPaper>
             </MudPaper>
         </MudListItem>
     </MudPaper>
 </div>

 <!-- Move to Component at some point -->
 <MudOverlay Visible="openSettings" DarkBackground="true" ZIndex="9999">
     <MudPaper Width="90vw" Height="90vh" Style="background: var(--mud-palette-dark);" Class="d-flex align-content-center justify-center flex-column  flex-grow-1 gap-12" Elevation="2">
         <MudButton Style="position: absolute; top: 25px; right: 25px;" Color="Color.Error" Variant="Variant.Filled" OnClick="ToggleSettings">x</MudButton>
         <MudText Typo="Typo.h3" Align="Align.Center" Style="padding-top: 25px;">SETTINGS</MudText>
         <MudButton Class="align-self-center justify-center" Color="Color.Error" Variant="Variant.Filled" OnClick="logout">Logout</MudButton>
         <MudButton Class="align-self-center justify-center" Color="Color.Warning" Variant="Variant.Filled" OnClick="updatepopup">Update</MudButton>
     </MudPaper>
 </MudOverlay>

 @code {
    Popup popup = new();

    bool mute = false;
    bool deaf = false;
    bool openSettings = false;


    public MemberDTO account = new()
    {
        Id = 113,
        Profile = new ExternalUserProfileDTO()
        {
            AboutMe = "Test Message",
            BannerColour = "#5C23D9",
            MutualFriends = null, //Insert Entire UserDTO to test
            MutualServers = null, //Servers Not Implemented, might make dummydata servers to test
            Note = "Test",
            User = new()
            {
                Name = "BobTheBuilder" //Is this the only value in Member.Profile.User we need, maybe move out to profile or just member idk?
            },
            /* Not yet implemented fully? */
            // MembershipBadges =
            // {
            //     new MembershipBadgeDTO()
            //     {
            //         IconName = "Echo",
            //         IconURL = null,
            //         OrderingWeight = 0,
            //         TimeJoined = DateTime.Now.AddDays(-13).AddMinutes(23),
            //     },
            // }
        },
        ImageIconURL = "https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/large/800/Shrek.Shrek.webp",
        ActiveStatus = new ActiveActivityStatusDTO()
        {
            DisplayedContent = "Away",
            Icon = "",
            IconColor = Color.Warning.ToString(),
            Name = "Away"
        },
        DisplayName = "Bob The Builder",
        NameColour = "#F0F",
        IsOwner = false,
        GroupingName = "" // Members / role name
    };

    private void OpenProfile()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraExtraLarge };
        popup.ShowPopup("Echo member since", DateTime.UtcNow.AddDays(-2).ToString("dd MMMM yyyy"), account.DisplayName);
        //DialogService.Show<Profile>("Simple Dialog", options);
    }

    void ToggleMute()
    {
        mute = !mute;
    }
    void ToggleDeaf()
    {
        deaf = !deaf;
    }
    void ToggleSettings()
    {
        openSettings = !openSettings;
    }


    private async void logout()
    {
        await LocalStorage.RemoveItemAsync("AccountId");
        await LocalStorage.RemoveItemAsync("Token");
        AccountContainer.SetValue(0, string.Empty);
        nav.NavigateTo("/login");
    }

    private async void updatepopup()
    {

    }
}
