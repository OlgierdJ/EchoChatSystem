@page "/"
@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.Entities.EchoCore.ChatCore
@using EchoWebapp.Client.Components.DirectMessages
@using EchoWebapp.Client.Components.Servers
@rendermode InteractiveAuto
@inject ILocalStorageService LocalStorage
@inject NavigationManager nav
@inject IUserContainer SessionRepository
@implements IDisposable
@inject EchoAPI _echoAPI


@*
    Index layout that holds the general application layout navigation and content.

    This component allows for navigation to the direct messages section and to specific servers via the server list it contains.
*@

@* <h3>IndexComponent</h3> *@

@* so you dont see the UI befor you are logget in*@
@if (loggedIn)
{
    <div class="d-flex" style="height: 97vh;">
        <ServerListComponent OnItemSelected=@HandleOnChanged/>
        <DirectMessagesViewComponent self=self DisplayFriends=display />
    </div>
}
else 
{
    <MudOverlay Visible="true" DarkBackground="true" ZIndex="9999">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudOverlay>
}

@code {

    bool display = true;
    bool loggedIn = false;
    public UserFullDTO self { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (!await LocalStorage.ContainKeyAsync("Token"))
            {
                nav.NavigateTo("/login");
            }
            else
            {
                var token = await LocalStorage.GetItemAsStringAsync("Token");

                var result = await _echoAPI.LoadUserSessionDataAsync(token);
                if(result != null)
                {

                    loggedIn = true;
                    result.ActiveStatus.DisplayedContent = result.ActiveStatus.Name;
                    SessionRepository.self = result;
                    self = SessionRepository.self;
                }
                else
                {
                    nav.NavigateTo("/login");
                }
                SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void SessionRepository_SessionChangeOccured()
    {
        //await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }
    public void HandleOnChanged(bool selected)
    {
        display = selected;
        StateHasChanged();
    }
}