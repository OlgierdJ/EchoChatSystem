@using CoreLib.DTO.EchoCore.ChatCore.TextCore
@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.Entities.EchoCore.ChatCore
@using EchoWebapp.Client.Components.Shared.User
@using MudBlazor
@using EchoWebapp.Client.Components.DirectMessages.Friends
@using EchoWebapp.Client.Components.DirectMessages.Chats
@implements IDisposable
@inject IUserContainer SessionRepository
@rendermode InteractiveAuto
@*
    Layout for the friends section that exists within the DirectMessagesViewComponent in the indexcomponent.

    This component holds several sections via navigation in tabs that displays online users,
    all users, pending requests, friend suggestions, blocked users and the option to add friends.
*@

@* <h3>DirectMessageViewComponent</h3> *@

<div>
    <ChatListComponent self=self OnItemSelected=@HandelOnChatChanged />
    <UserConnectionUIComponent self=self />
</div>
@if (!isLoading)
{

    @if (DisplayFriends)
    {
        <FriendsViewComponent self=self />
    }
    else
    {
        <ChatViewComponent self=self Content="@chat" />
    }
}

@code {
    [Parameter]
    public bool DisplayFriends { get; set; }

    public bool isLoading { get; set; }

    [Parameter]
    public UserFullDTO self { get; set; }

    public ChatDTO chat { get; set; }
    //set as latest chat pr default

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            chat = self.DirectMessages.FirstOrDefault();
            SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void SessionRepository_SessionChangeOccured()
    {
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }
    public async void HandelOnChatChanged(ChatDTO c)
    {
        isLoading = true;
        DisplayFriends = false;
        chat = null;
        chat = c;
        if (c == null)
        {
            DisplayFriends = true;
        }
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}
