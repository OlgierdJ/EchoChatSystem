@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.Entities.EchoCore.AccountCore
@*
    Layout for the blocked list that exists within the friendsviewcomponent.

    This component holds all blocked users and allows the user to search within the blocked users to filter them.

    Clicking a blocked user allows the user to view the blocked user's profile.

    The user can also unblock the blocked user by clicking the unblock button relative to the user.
*@

@if (filtered != null)
{
    <MudPaper Square Height="5vh" Class="px-3 mb-6" Elevation="0">
         <MudTextField Placeholder=" Search" @bind-Value="searchTerm"
                       @onkeyup="(()=>SearchChanged())" Immediate />
     </MudPaper>
    <MudText Class="px-5 py-2" Typo="Typo.button">Blocked - @List.Count()</MudText>
    <MudList Clickable="true">
        @foreach (var u in filtered.OrderBy(x => x.DisplayName))
        {
            <MudDivider />
            <MudListItem Dense="true" Class="mb-3 mt-2">
                <BlockedUserComponent User="u" />
            </MudListItem>
        }
    </MudList>

}
else
{
    <MudPaper Square Class="px-3 mb-6" Elevation="0">
         <MudText>There are no blocked users at the moment.</MudText>
     </MudPaper>
}
@code {
    public string searchTerm = "";

    [Parameter]
    public List<UserMinimalDTO> List { get; set; }

    public List<UserMinimalDTO> filtered { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            filtered = List;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void SearchChanged()
    {
        Console.WriteLine(searchTerm);
        filtered = List.Where(e => e.DisplayName.ToLower().Contains(searchTerm.ToLower())).ToList();
        StateHasChanged();
    }
}
