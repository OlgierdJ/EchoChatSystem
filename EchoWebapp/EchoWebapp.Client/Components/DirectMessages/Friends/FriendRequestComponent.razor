@using CoreLib.DTO.EchoCore.UserCore
@inject ILocalStorageService LocalStorage
@inject EchoAPI _echoAPI
@inject IUserContainer SessionRepository

@*
    Friend Request layout for when it exists within the scrollable list in the FriendRequestListComponent.

    This component should hold reflect either an outgoing or incoming request.

    If the request is outgoing the request should allow the user to revoke it.

    If the request is incoming the request should allow the user to accept or decline it.
*@
<div class="d-flex flex-grow-1" @onmouseover="MouseOver" @onmouseout="MouseOut">
    @if (Request != null)
    {
        <MudImage Src="@Request.Person.ImageIconURL" Height="32" Width="32" ObjectFit="ObjectFit.Cover" Class="rounded-circle mt-1 ml-1" />
        <MudText Class="ml-3" Typo="Typo.caption">
            @((MarkupString)("<b>" + Request.Person.DisplayName + "</b> " + (handleVisible ? $"<i> {Request.Person.Name} </i>" : "") +
                "\r\n" + Request.Type.ToString() + " Friend Request").Replace(Environment.NewLine, "<br />"))
        </MudText>
        <MudSpacer />

        @if (Request.Type == CoreLib.Entities.Enums.RequestType.Outgoing)
        {
            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Cancel" Title="Cancel" OnClick="cancelRequest" />
        }
        else
        {
            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Check" Title="Accept" OnClick="acceptRequest" />
            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Cancel" Title="Decline" OnClick="declineRequest" />
        }
    }
</div>

@code {
    [Parameter]
    public FriendRequestDTO? Request { get; set; }

    bool handleVisible = false;
    void MouseOver(MouseEventArgs e) { handleVisible = true; }
    void MouseOut(MouseEventArgs e) { handleVisible = false; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SessionRepository.SessionChangeOccured += Changed;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void Changed()
    {
        await InvokeAsync(StateHasChanged);
    }

    async void acceptRequest()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");

        var result = await _echoAPI.AcceptFriendRequestAsync(token, Request.Id);
        Console.WriteLine(result);
        if (result)
        {
            Console.WriteLine("Accept success!");
            StateHasChanged();
        }
    }

    async void declineRequest()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");

        var result = await _echoAPI.DeclineFriendRequestAsync(token, Request.Id);
        Console.WriteLine(result);
        if (result)
        {
            Console.WriteLine("Decline success!");
            StateHasChanged();
        }
    }

    async void cancelRequest()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");

        var result = await _echoAPI.CancelFriendRequestAsync(token, Request.Id);
        Console.WriteLine(result);
        if (result)
        {
            Console.WriteLine("Cancel success!");
            StateHasChanged();
        }
    }
}