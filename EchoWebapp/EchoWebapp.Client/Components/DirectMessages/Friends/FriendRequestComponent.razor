@using CoreLib.DTO.EchoCore.UserCore
@*
    Friend Request layout for when it exists within the scrollable list in the FriendRequestListComponent.

    This component should hold reflect either an outgoing or incoming request.

    If the request is outgoing the request should allow the user to revoke it.

    If the request is incoming the request should allow the user to accept or decline it.
*@
<div class="d-flex flex-grow-1" @onmouseover="MouseOver" @onmouseout="MouseOut">
    @if (Request != null)
    {
        <MudImage Src="@Request.Person.ImageIconURL" Height="32" Width="32" ObjectFit="ObjectFit.Cover" Class="rounded-circle mt-1 ml-1" />
        <MudText Class="ml-3" Typo="Typo.caption">
            @((MarkupString)("<b>" + Request.Person.DisplayName + "</b> " + (handleVisible ? $"<i> {Request.Person.Name} </i>" : "") + 
            "\r\n" + Request.Type.ToString()+" Friend Request").Replace(Environment.NewLine, "<br />"))
        </MudText>
        <MudSpacer/>

        @if (Request.Type == CoreLib.Entities.Enums.RequestType.Outgoing)
        {
            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Cancel" Title="Cancel"  />
        }
        else
        {
            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Check" Title="Accept" />
            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Cancel" Title="Reject" />
        }
    }
 </div>

@code {
    [Parameter]
    public FriendRequestDTO? Request { get; set; }

    bool handleVisible = false;
    void MouseOver(MouseEventArgs e) { handleVisible = true; }
    void MouseOut(MouseEventArgs e) { handleVisible = false; }
}