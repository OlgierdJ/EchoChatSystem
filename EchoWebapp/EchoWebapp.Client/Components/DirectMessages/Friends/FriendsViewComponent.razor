@page "/friends"
@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.DTO.RequestCore.FriendCore
@using CoreLib.WebAPI.EchoClient
@using EchoWebapp.Client.Components.DirectMessages.Chats
@using MudBlazor
@rendermode InteractiveAuto
@inject ILocalStorageService LocalStorage
@inject IUserContainer SessionRepository
@implements IDisposable
@inject NavigationManager nav
@inject EchoAPIClient _echoAPI

@*
    Layout for the friends section that exists within the DirectMessagesViewComponent in the Direct Messages section.

    This component holds several sections via navigation in tabs that displays online users,
    all users, pending requests, friend suggestions, blocked users and the option to add friends.
*@
@* <h3>FriendsViewComponent</h3> *@
 
@if(self != null)
{
    
<div class="ma-0 overflow-auto" style="width: 65vw; height: 100vh;">
    <MudTabs Elevation="0" ApplyEffectsToContainer="true" PanelClass="pa-6" @bind-ActivePanelIndex="@_activePanel">
        <Header>
        </Header>
        <ChildContent>
            <MudTabPanel Text="Online" tabindex="0" >
                <FriendListComponent displayAll=false List="@self.Friends" />
            </MudTabPanel>
            <MudTabPanel Text="All" tabindex="1" >
                <FriendListComponent displayAll=true List="@self.Friends"/>
            </MudTabPanel>
            <MudTabPanel Text="Pending" tabindex="2" >
                <FriendRequestListComponent List="@self.Requests"/>
            </MudTabPanel>    
            <MudTabPanel Text="Blocked" tabindex="3" >
                <BlockedListComponent List="@self.BlockedUsers"/>
            </MudTabPanel>
            <MudTabPanel Text="Add Friend" tabindex="4" >

                 <MudTextField @bind-Value="searchTerm" Margin="Margin.Dense" Variant="Variant.Outlined" Label="USERNAME"
                      Class="align-self-center justify-center px-5 py-2" MaxLength="32" MaxLines="1"
                      Immediate="true" TextUpdateSuppression="false" Style="background: var(--mud-palette-darken);opacity:1;width: 500px;" />

            <MudButton Class="align-self-center justify-start" Color="Color.Success" Variant="Variant.Filled" Style="width: 120px; margin-right: 25px;" OnClick="addFriend">Add Friend</MudButton>
            </MudTabPanel>
        </ChildContent>
    </MudTabs>
</div

<!--@* <ChatUserProfileComponent Visible="ToggleSidePanel" /> *@ -->

    <MudPaper Width="18vw" Height="100vh" Square Style="background: var(--mud-palette-dark);">
         <h1>Activity Test</h1>
     </MudPaper>
     
}

@code {
    [Parameter]
    public UserFullDTO? self { get; set; }

    public bool ToggleSidePanel = true;
    string searchTerm = "";

    int _activePanel;

    async void addFriend()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");

        var result = await _echoAPI.SendFriendRequestAsync(token, new AddFriendRequestDTO(){ Name = searchTerm });
        if (result)
        {
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    public void Dispose()
    { 
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }
    private async void SessionRepository_SessionChangeOccured()
    {
        await InvokeAsync(StateHasChanged);
    }

    @* 
        It's possible to naviagte the tabs with buttons, so can make custom MudToolBar with MudButtons for each tab and add friend.
        Alternatively, add friend button is in the header, but the MudTabToolbarContent's width is filling all it can.
        <MudButton OnClick="@(()=>GoToTab(2))">Go To Tab 3</MudButton>
    
        void GoToTab(int tabIndex){
            _activePanel = tabIndex;
        }
    *@
}
