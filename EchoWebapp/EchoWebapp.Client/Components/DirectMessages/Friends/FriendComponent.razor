@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.DTO.RequestCore.RelationCore
@using CoreLib.Entities.EchoCore.AccountCore
@using EchoWebapp.Client.Pages
@inject ILocalStorageService LocalStorage
@inject IUserContainer SessionRepository
@implements IDisposable
@inject EchoAPI _echoAPI
@inject IDialogService Dialog

@*
    friendcomponent layout for when it exists within the scrollable list in the friendlistcomponent.

    This component should display the users displayname, status, customstatusmessage, image.

    Hovering the friend component should display their userhandle beside their displayname.

    Clicking Message or Hovering and left-clicking the member, allows the user to navigate directly to their shared private chat.

    Hovering and right-clicking the member allows the user to display the user tooltip of the friend.
*@

<div class="d-flex flex-grow-1" @onmouseover="MouseOver" @onmouseout="MouseOut">
    @if (User != null)
    {
        <MudBadge Color="@stringToColor.ConvertStringToColor(User.ActiveStatus.IconColor)" Icon="@User.ActiveStatus.Icon"
                    Bordered Overlap="true" Origin="Origin.BottomRight">
             <MudImage Src="@User.ImageIconURL" Height="32" Width="32" ObjectFit="ObjectFit.Cover" Class="rounded-circle mt-1 ml-1" />
         </MudBadge>
        <MudText Class="ml-3" Typo="Typo.caption">@((MarkupString)("<b>" + User.DisplayName + "</b> " + (handleVisible ? $"<i> {User.Name} </i>" : "") + "\r\n" + User.ActiveStatus.Name).Replace(Environment.NewLine, "<br />"))</MudText>
        <MudSpacer />
        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Rounded.ChatBubble" Title="Message" OnClick="startChat" />
        <MudMenu Variant="Variant.Filled" Icon="@Icons.Material.Filled.MoreVert" Label="More">
            <MudMenuItem Disabled>Start Video Call</MudMenuItem>
         <MudMenuItem Disabled>Start Voice Call</MudMenuItem>
         <MudMenuItem OnClick="removeFriend"><MudText Color="Color.Error">Remove Friend</MudText></MudMenuItem>
         <MudMenuItem OnClick="setNickname">Add Nickname</MudMenuItem>
     </MudMenu>
    }
</div>
@code {
    [Parameter]
    public UserDTO? User { get; set; }

    public readonly StringToColor stringToColor = new();

    bool handleVisible = false;
    void MouseOver(MouseEventArgs e) { handleVisible = true; }
    void MouseOut(MouseEventArgs e) { handleVisible = false; }

    // private async void OpenDialog()
    // {
    //     var options = new DialogOptions { CloseOnEscapeKey = true };
    //     // var dia = await Dialog.Show<SetNicknameDialog>($"Remove {User.DisplayName}", options).Result;
    //     var dia = await Dialog.Show<RemoveFriendDialog>($"Remove {User.DisplayName}", options).Result;
    //     if (dia.Data != null && !dia.Canceled)
    //     {
    //         Console.WriteLine("pressed the button");
    //     }
    // }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void SessionRepository_SessionChangeOccured()
    {
        await InvokeAsync(StateHasChanged);
    }

    async void startChat()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");

        var result = await _echoAPI.StartDirectMessagesAsync(token, User.Id);
        Console.WriteLine(result);
        if (result)
        {
            Console.WriteLine("Accept success!");
            StateHasChanged();
        }
    }

    async void removeFriend()
    {
        var options = new DialogOptions { Position = DialogPosition.TopCenter, CloseOnEscapeKey = true };

        var dia = await Dialog.Show<RemoveFriendDialog>($"Remove {User.DisplayName}", options).Result;
        if (dia.Data != null && !dia.Canceled)
        {
            var token = await LocalStorage.GetItemAsStringAsync("Token");

            var result = await _echoAPI.RemoveFriendAsync(token, User.Id);
            Console.WriteLine(result);
            if (result)
            {
                Console.WriteLine("Removed friend success!");
                StateHasChanged();
            }
        }
    }
    public void Dispose()
    {
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }
    async void setNickname()
    {
        var options = new DialogOptions { Position = DialogPosition.TopCenter, CloseOnEscapeKey = true };
        var dia = await Dialog.ShowAsync<SetNicknameDialog>($"Add Nickname for {User.DisplayName}", options);
        var diaResult = await dia.Result;
        if (!diaResult.Canceled)
        {
            var token = await LocalStorage.GetItemAsStringAsync("Token");

            var returnedData = await dia.GetReturnValueAsync<string>();

            Console.WriteLine(returnedData);

            var nickname = new SetNicknameUserRequestDTO()
                {
                    Nickname = returnedData.ToString()
                };

            var result = await _echoAPI.SetNicknameAsync(token, User.Id, nickname);
            if (result)
            {
                Console.WriteLine($"Nickname set to {returnedData} on {User.DisplayName} success!");
                StateHasChanged();
            }
        }
    }
}
