@using CoreLib.DTO.EchoCore.ChatCore.TextCore
@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.Entities.EchoCore.AccountCore
@using CoreLib.Entities.EchoCore.ChatCore
@using MudBlazor
@rendermode InteractiveAuto

@*
    Layout for the Scrollable list that exists within the directmessagesviewcomponent.

    This component holds all chats and allows the user to search within the chats to filter them.

    Clicking chats within this component should call for parent navigation to the chatviewcomponent.
*@
@* <h3>ChatListComponent</h3> *@

@if (chat != null)
{
    <MudPaper Width="13vw" Height="90vh"
            Square Style="background: var(--mud-palette-surface);">
         <MudText Class="px-5 py-2">Direct Messages</MudText>
         <MudList Clickable="true">
            @foreach (var c in chat.OrderByDescending(e => e.Id))
            {
                <MudListItem Dense="true" OnClick="@(() => OnItemSelected.InvokeAsync(c))">
                    <ChatComponent OwnId=self.Id Chat="SortChat(c)" />
                </MudListItem>
            }
        </MudList>
    </MudPaper>
}
@code {
    [Parameter]
    public UserFullDTO self { get; set; }

    public List<ChatDTO> chat { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            chat = self.DirectMessages.ToList();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    public ChatDTO SortChat(ChatDTO c)
    {
        c.Messages = c.Messages.OrderBy(e => e.TimeSent).ToList();
        return c;
    }

    [Parameter]
    public EventCallback<ChatDTO> OnItemSelected { get; set; }

}