@implements IDisposable
@inject EchoChatApiServiceClient _echoAPI
@inject EchoChatPushNotificationServiceClient _client
@inject ILocalStorageService LocalStorage
@inject IJSRuntime _js
@inject IScrollManager Scroll
@inject IUserContainer SessionRepository

@*
    Layout for the chatviewcomponent that exists within the directmessagesviewcomponent.

    This component shows the general chat layout, allowing the user to view existing messages and send new messages as well as pin them to a pinboard shared with the other members.

    Furthermore if the chatview displays a chat with more than 2 members it allows the user to view the members by expanding the memberlist
    Otherwise only two users are within the chat it allows the user to expand the userprofile of the other member.

    Also the chatview allows the user to start a call within the chat.

    The user can also choose to add new members to a chat.
    if the chat is a private chat then a new chat will be created with the new members and the existing members
    otherwise the members will be added to the chat.
*@
@* <h3>ChatViewComponent</h3> *@
@if (Content != null)
{
    <div>
        <div class="ma-0" style="width: 83vw; height: 5vh;">
            <MudPaper Elevation="0">
                <MudToolBar Class="d-flex flex-grow-1 gap-0 my-0">
                    @if (Content.Participants.Count() > 2)
                    {
                        <MudAvatar>
                            @* <MudImage Src="@Content.IconUrl" /> *@
                        </MudAvatar>
                        <MudText>@Content.Name</MudText>
                    }
                    else
                    {
                        <MudAvatar>
                            <MudImage Src="@Content?.Participants?.Where(e => e.Id != self.Id).First().ImageIconURL" />
                        </MudAvatar>
                        <MudText Class="ml-2">@Content?.Participants?.Where(e => e.Id != self.Id).First().DisplayName</MudText>
                    }
                    <MudSpacer />
                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudIconButton Icon="@Icons.Material.Filled.Call" />
                        <MudIconButton Icon="@Icons.Material.Filled.PushPin" />
                        <MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" OnClick="ToggleAddFriends" />
                    </MudPaper>
                    @if (Content.Participants.Count() > 2)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Group" Color="@(DisplaySidePanel ? Color.Primary : Color.Default)" OnClick="ToggleSidePanel" />
                        TextPlaceholder = "Message " + Content.Name;
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="@(DisplaySidePanel ? Color.Primary : Color.Default)" OnClick="ToggleSidePanel" />
                        TextPlaceholder = "Message @" + Content?.Participants?.Where(e => e.Id != self.Id).First().DisplayName;
                    }
                </MudToolBar>
            </MudPaper>
        </div>

        <div class="d-flex" style="width: 83vw;">
                    <MudPaper Elevation="0" Class="py-2" Style="@($"background:{Colors.Shades.Transparent};float: left;")" Width="83vw" Height="80vh">

                        <MudList id="MessageList" Class="my-4 py-0 overflow-auto" Style="@($"background:{Colors.Shades.Transparent}; width: 100%; height: 100%;")">
                            <MudListItem>
                                <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")" Class="overflow-auto">

                                    @foreach (var dateBundledMessageGrp in DateBundledMessageGroups)
                                    {
                                        //create group here
                                        if (dateBundledMessageGrp.Key.Date == DateTime.UtcNow.Date)
                                        {
                                            <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                    <MudDivider FlexItem />
                                                 </MudPaper>
                                                 <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                     <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Today</MudText>
                                                 </MudPaper>
                                                 <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                     <MudDivider FlexItem />
                                                 </MudPaper>
                                             </MudPaper>
                                        }
                                        else if (dateBundledMessageGrp.Key.Date == DateTime.UtcNow.AddDays(-1).Date)
                                        {
                                            <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                    <MudDivider FlexItem />
                                                 </MudPaper>
                                                 <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                     <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Yesterday</MudText>
                                                 </MudPaper>
                                                 <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                     <MudDivider FlexItem />
                                                 </MudPaper>
                                             </MudPaper>
                                        }
                                        else
                                        {
                                            <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                    <MudDivider FlexItem />
                                                 </MudPaper>
                                                 <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                     <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">@dateBundledMessageGrp.Key.Day @dateBundledMessageGrp.Key.ToString("MMMM") @dateBundledMessageGrp.Key.Year</MudText>
                                                    </MudPaper>
                                                    <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                        <MudDivider FlexItem />
                                                 </MudPaper>
                                             </MudPaper>
                                        }

                                        var timeOrderedMessages = dateBundledMessageGrp
                                        .Select(e => e) //flatten bundle
                                        .OrderBy(e => e.TimeSent); //order bundle by specific time of day

                                        ulong? prevSender = 0;
                                        DateTime prevTimeSent = DateTime.MinValue; //always reset on new bundle

                                        foreach (var message in timeOrderedMessages)
                                        {

                                            //place authored message.
                                            var placeAsFirstMessageInBundle = !checkIfBundleByTime(message.TimeSent, prevTimeSent);
                                            prevTimeSent = message.TimeSent;
                                            if (placeAsFirstMessageInBundle || prevSender != message.Sender?.Id)
                                            {
                                                prevSender = message.Sender?.Id;
                                                if (prevSender is not null)
                                                {
                                                    //place message with image, name and such
                                                    <MudPaper Elevation="0" class="d-flex flex-grow-1 gap-4 px-4 pt-4 mt-2" Style="@($"background:{Colors.Shades.Transparent}")">
                                                        <div class="d-flex flex-grow-1 gap-4">
                                                            <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                                                                @if (message.Sender != null)
                                                                {
                                                                    <MudImage Src="@message.Sender.ImageIconURL"></MudImage>
                                                                }
                                                                else
                                                                {
                                                                    @message.Sender?.DisplayName.First()
                                                                }
                                                            </MudAvatar>

                                                            <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                                <div class="d-flex flex-grow-1 gap-3">
                                                                    <MudText Color="Color.Primary">@message.Sender?.DisplayName </MudText>
                                                                        <MudText Style="@($"color:{Colors.Grey.Default};")">@message.TimeSent.ToString("HH:mm")</MudText>
                                                                    </div>
                                                            <MudText Style="overflow-wrap:break-word;width:60vw;" Typo="Typo.body1">@((MarkupString)message.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                                                                </MudPaper>
                                                        <MudMenu Variant="Variant.Filled" Icon="@Icons.Material.Filled.MoreVert" Label="More">
                                                            <MudMenuItem Disabled>Add reaction</MudMenuItem>
                                                     @if (message.IsPinned)
                                                        {
                                                            <MudMenuItem OnClick="()=>_echoAPI.UnpinChatMessage(Token, Content.Id, message.Id)">Unpin Message</MudMenuItem>
                                                        }
                                                        else
                                                        {
                                                            <MudMenuItem OnClick="()=>_echoAPI.PinChatMessage(Token, Content.Id, message.Id)">Pin Message</MudMenuItem>
                                                        }
                                                        <MudMenuItem Disabled OnClick="()=>_echoAPI.MarkMessageUnread(Token, Content.Id, message.Id)">Mark Unread</MudMenuItem>
                                                         <MudMenuItem OnClick="()=>{ReplyingTo=message; replyingToVisibility = true; }">Reply</MudMenuItem>
                                                         <MudMenuItem Disabled>Create Thread</MudMenuItem>
                                                     <MudMenuItem OnClick="()=>CopyMessageText(message)">Copy Text</MudMenuItem>
                                                     <MudMenuItem OnClick="()=>CopyMessageLink(message)">Copy Message Link</MudMenuItem>
                                                     <MudMenuItem OnClick="()=>_echoAPI.RemoveChatMessage(Token, Content.Id, message.Id)"><MudText Color="Color.Error">Delete Message</MudText></MudMenuItem>
                                                     <MudMenuItem Disabled>Report Message</MudMenuItem>
                                                 </MudMenu>
                                                            </div>
                                                        </MudPaper>
                                                }
                                                else
                                                {
                                                    //place message with image, name and such
                                                    <MudPaper Elevation="0" class="d-flex flex-grow-1 gap-4 px-4 pt-4 mt-2" Style="@($"background:{Colors.Shades.Transparent}")">
                                                        <div class="d-flex flex-grow-1 gap-4">
                                                            <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                                                        
                                                                <MudIcon Icon="@Icons.Material.Filled.PushPin"></MudIcon>
                                                        
                                                            </MudAvatar>

                                                            <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                                <div class="d-flex flex-grow-1 gap-3">
                                                                    <MudText Style="@($"color:{Colors.Grey.Default};")">@message.TimeSent.ToString("HH:mm")</MudText>
                                                                    </div>
                                                            <MudText Style="overflow-wrap:break-word;width:60vw;" Typo="Typo.body1">@((MarkupString)message.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                                                                </MudPaper>
                                                        <MudMenu Variant="Variant.Filled" Icon="@Icons.Material.Filled.MoreVert" Label="More">
                                                        <MudMenuItem Disabled>Add reaction</MudMenuItem>
                                                        @if (message.IsPinned)
                                                        {
                                                            <MudMenuItem Disabled OnClick="()=>_echoAPI.UnpinChatMessage(Token, Content.Id, message.Id)">Unpin Message</MudMenuItem>
                                                        }
                                                        else
                                                        {
                                                            <MudMenuItem Disabled OnClick="()=>_echoAPI.PinChatMessage(Token, Content.Id, message.Id)">Pin Message</MudMenuItem>
                                                        }
                                                        <MudMenuItem Disabled OnClick="()=>_echoAPI.MarkMessageUnread(Token, Content.Id, message.Id)">Mark Unread</MudMenuItem>
                                                         <MudMenuItem Disabled OnClick="()=>{ReplyingTo=message; replyingToVisibility = true; }">Reply</MudMenuItem>
                                                         <MudMenuItem Disabled>Create Thread</MudMenuItem>
                                                         <MudMenuItem OnClick="()=>CopyMessageText(message)">Copy Text</MudMenuItem>
                                                         <MudMenuItem OnClick="()=>CopyMessageLink(message)">Copy Message Link</MudMenuItem>
                                                         <MudMenuItem OnClick="()=>_echoAPI.RemoveChatMessage(Token, Content.Id, message.Id)"><MudText Color="Color.Error">Delete Message</MudText></MudMenuItem>
                                                         <MudMenuItem Disabled>Report Message</MudMenuItem>
                                                 </MudMenu>
                                                            </div>
                                                        </MudPaper>
                                                }
                                                continue; //skip to next message
                                            }
                                            //place message in bundle format (without sender name and image and only with hover effect for timesent)
                                            <MudPaper Elevation="0" class="d-flex flex-grow-1 px-4 align-center" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <div class="d-flex flex-grow-1 gap-4 align-center">
                                                    <MudAvatar Style="background-color:unset; height:1px;" Size="Size.Medium"></MudAvatar>
                                                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudText Style="overflow-wrap:break-word;width:60vw;" Typo="Typo.body1">@((MarkupString)message.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                                                    </MudPaper>
                                                    <MudMenu Variant="Variant.Filled" Icon="@Icons.Material.Filled.MoreVert" Label="More">
                                                <MudMenuItem Disabled>Add reaction</MudMenuItem>
                                            @if (message.IsPinned)
                                                {
                                                    <MudMenuItem Disabled=@(message.Sender==null) OnClick="()=>_echoAPI.UnpinChatMessage(Token, Content.Id, message.Id)">Unpin Message</MudMenuItem>
                                                }
                                                else
                                                {
                                                    <MudMenuItem Disabled=@(message.Sender==null) OnClick="()=>_echoAPI.PinChatMessage(Token, Content.Id, message.Id)">Pin Message</MudMenuItem>
                                                }
                                                <MudMenuItem Disabled OnClick="()=>_echoAPI.MarkMessageUnread(Token, Content.Id, message.Id)">Mark Unread</MudMenuItem>
                                                <MudMenuItem Disabled=@(message.Sender==null) OnClick="()=>{ReplyingTo=message; replyingToVisibility = true; }">Reply</MudMenuItem>
                                                <MudMenuItem Disabled>Create Thread</MudMenuItem>
                                                <MudMenuItem OnClick="()=>CopyMessageText(message)">Copy Text</MudMenuItem>
                                                <MudMenuItem OnClick="()=>CopyMessageLink(message)">Copy Message Link</MudMenuItem>
                                                <MudMenuItem OnClick="()=>_echoAPI.RemoveChatMessage(Token, Content.Id, message.Id)"><MudText Color="Color.Error">Delete Message</MudText></MudMenuItem>
                                                <MudMenuItem Disabled>Report Message</MudMenuItem>
                                              
                                                </MudMenu>
                                                </div>
                                            </MudPaper>
                                        }
                                    }

                                </MudPaper>
                            </MudListItem>
                        </MudList>

                        <div class="d-flex flex-column flex-grow-1" style="width: 83vw;">
                            <!-- This bar is initially loaded in so it calculates its size. then hides it until replying. -->
                            <div style="visibility: @(replyingToVisibility ? "none" : "hidden"); height: 3vh;">
                                @if (ReplyingTo != null)
                                {
                            <MudButton Class="ml-8" Style="background: var(--mud-palette-dark-darken);"
                                    @onclick="()=>{ReplyingTo=null; replyingToVisibility = false; }">Replying to @ReplyingTo?.Sender?.DisplayName   -  Click here to stop replying</MudButton>
                                }   
                            </div>
                            <MudToolBar Class="d-flex flex-column-reverse flex-grow-1 gap-0 py-0 my-0" Style="@($"background:{Colors.Shades.Transparent}; height: 5vh;")">
                                <MudTextField FullWidth
                                    @ref="RefEntryField"
                                    AutoGrow
                                    @bind-Value="MessageModel.Content"
                                    Immediate="true"
                                    OnKeyUp="OnTextChatSend"
                                    Lines="1" 
                                    Placeholder="@TextPlaceholder"
                                    MaxLines="11"
                                    MaxLength="1000"
                                    Variant="Variant.Filled"
                                    Margin="Margin.Dense"
                                    Style="background: var(--mud-palette-dark);opacity:1;margin-top: 10px;" />
                            </MudToolBar>
                        </div>
                    
                    </MudPaper>
                         @if (Content?.Participants?.Count() > 2)
                {
                <MemberListComponent Visible="DisplaySidePanel" Members="@Content?.Participants?.ToList()" />
                }
                else
                {
                <ChatUserProfileComponent Visible="DisplaySidePanel" Member="@Content?.Participants?.Where(e => e.Id != self.Id).First()" />
                }

            

        </div>

    </div>

    <MudOverlay Visible="DisplayAddFriends" DarkBackground="true" ZIndex="2">
        <MudPaper Width="20vw" Height="30vh" Style="background: var(--mud-palette-dark);" Class="d-flex align-content-center justify-center flex-column  flex-grow-1 gap-12" Elevation="2">
            <MudButton Style="position: absolute; top: 15px; right: 15px; height: 25px;" Color="Color.Error" Variant="Variant.Filled" OnClick="ToggleAddFriends">x</MudButton>
            <MudText Typo="Typo.h5" Align="Align.Center" Style="padding-top: 15px;">SELECT FRIENDS</MudText>

            <MudSelect T="UserDTO" Label="Friends" MultiSelection="true" SelectedValues="@selectedFriends" SelectedValuesChanged="SelectedValuesChanged"
                       AnchorOrigin="Origin.BottomCenter" PopoverClass="fixed">

                @foreach (UserDTO f in friends)
                {
                    <MudSelectItem Value="@f">
                        <MudAvatar>
                            <MudImage Src="@f.ImageIconURL" />
                        </MudAvatar>
                        <MudText Class="pl-3" Typo="Typo.caption">@f.DisplayName</MudText>
                        </MudSelectItem>
                }

            </MudSelect>
            <MudButton Class="align-self-center justify-center" Color="Color.Primary" Variant="Variant.Filled" OnClick="AddFriends">Add</MudButton>
        </MudPaper>
    </MudOverlay>
}

@code {
    private MudTextField<string> RefEntryField;

    /* This is what we use to send text messages, the other ones are not in use. */
    private async Task OnTextChatSend(KeyboardEventArgs args)
    {
        if (!args.ShiftKey && args.Key is "Enter" or "NumppadEnter")
        {
            RefEntryField.TextUpdateSuppression = false;

            Console.WriteLine("SENDING TO API ETC");
            await SendMessage();
            MessageModel.Content = string.Empty;
            ReplyingTo = null;
            replyingToVisibility = false;
            await InvokeAsync(StateHasChanged);
            await Task.Run(async () =>
            {
                await Task.Delay(150);
                RefEntryField.TextUpdateSuppression = true;
            });
        }
    }
    bool _preventDefault;
    MessageDTO? ReplyingTo { get; set; }
    EditContext MyCurrentEditContext { get; set; }

    bool replyingToVisibility = true;

    void KeyDownHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Backspace" && MessageModel.Content.Length >= 1)
        {
            MessageModel.Content = MessageModel.Content.Substring(0,
                                       MessageModel.Content.Length - 1);
        }
    }

    protected override Task OnInitializedAsync()
    {   
        MyCurrentEditContext = new(MessageModel);
        SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
        return base.OnInitializedAsync();
    }

    async void KeyPressHandler(EditContext editContext, KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && editContext.Validate())
        {
            //send
            await SendMessage();
            MessageModel.Content = string.Empty;
            ReplyingTo = null;
            StateHasChanged();
            return;
        }
    }

    async void TextKeyPressHandler(KeyboardEventArgs args)
    {

        if (args.Key == "Enter" && args.ShiftKey)
        {
            //newline
            MessageModel.Content += Environment.NewLine;
            return;
        }
        else if (args.Key == "Enter")
        {
            return;
        }
        var key = (string)args.Key;
        MessageModel.Content += key;
    }
    [Parameter]
    public ChatDTO? Content { get; set; }

    [Parameter]
    public UserFullDTO self { get; set; }

    public ICollection<UserDTO> friends { get; set; }

    private ICollection<UserDTO> selectedFriends { get; set; }
    private IEnumerable<IGrouping<DateTime, MessageDTO>> MessageGroups { get; set; }
    private IOrderedEnumerable<IGrouping<DateTime, MessageDTO>> DateBundledMessageGroups { get; set; }

    private UserDTO selected { get; set; }
    private SendMessageRequestForm MessageModel { get; set; } = new();


    private string? token { get; set; }
    public bool DisplaySidePanel = false;
    public bool DisplayAddFriends = false;

    public string TextValue { get; set; }
    public string TextPlaceholder { get; set; }

    public string searchFriendText { get; set; }

    private void SelectedValuesChanged(IEnumerable<UserDTO> values)
    {
        this.selectedFriends = values.ToList();
    }

    public async void ToggleSidePanel()
    {
        DisplaySidePanel = !DisplaySidePanel;
        await InvokeAsync(StateHasChanged);
    }
    public async void ToggleAddFriends()
    {
        DisplayAddFriends = !DisplayAddFriends;
        await InvokeAsync(StateHasChanged);
    }
    public async void FilterFriends(string s)
    {
        if (!String.IsNullOrEmpty(searchFriendText))
        {
            friends = self.Friends.Where(e => e.DisplayName.Contains(searchFriendText) || e.Name.Contains(searchFriendText)).ToList();
        }
        else
        {
            friends = self?.Friends;
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void AddFriends()
    {
        if (selectedFriends.Count > 0)
        {
            var token = await LocalStorage.GetItemAsStringAsync("Token");

            if (!string.IsNullOrWhiteSpace(token))
            {
                if (Content.Participants.All(e => e.IsOwner))
                {
                    var result = await _echoAPI.CreateChat(token, Content.Participants.Select(e => e.Id).Concat(selectedFriends.Select(e => e.Id)).ToList());
                    //handle navigation to new chat, whatever else you do here.
                }
                else if (selectedFriends.Count == 1)
                {
                    var result = await _echoAPI.AddChatParticipant(token, Content.Id, selectedFriends.First().Id);
                    if (result)
                    {
                        selectedFriends.Clear();
                        await InvokeAsync(StateHasChanged);
                    }
                }
                else if (selectedFriends.Count > 1)
                {
                    //think it isnt working, probably select done wrong, but 6am so meh. tomorrows issue
                    var result = await _echoAPI.AddChatParticipants(token, Content.Id, selectedFriends.Select(e => e.Id).ToList());
                    if (result)
                    {
                        selectedFriends.Clear();
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        ReplyingTo = null;
        DateBundledMessageGroups = Content.Messages.GroupBy(e => e.TimeSent.Date).OrderBy(e => e.Key); //mayb move to initialized
        await base.OnParametersSetAsync();
    }
    public void Dispose()
    {
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }
    private async void SessionRepository_SessionChangeOccured()
    {
        DateBundledMessageGroups = Content.Messages.GroupBy(e => e.TimeSent.Date).OrderBy(e => e.Key);
        await InvokeAsync(StateHasChanged);
        Console.WriteLine(DateTime.Now);
    }
    //remember to add remove own message, remove others message if isowner except where they are owner too?
    //also mayb remove participant

    public string Token { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            replyingToVisibility = false;
            friends = self?.Friends.Where(e => !Content.Participants.Select(e => e.Id).Contains(e.Id)).ToList();

            Token = await LocalStorage.GetItemAsStringAsync("Token");
        }
        await base.OnAfterRenderAsync(firstRender);
        await Scroll.ScrollToBottomAsync("#MessageList", ScrollBehavior.Smooth);
    }

    bool checkIfBundleByTime(DateTime dt, DateTime prevDt)
    {
        //if dt is within 7 minutes of prevDt return false
        var result = (dt < prevDt.AddMinutes(7));
        return result;
    }
    private async Task CopyMessageText(MessageDTO message)
    {
        await _js.InvokeVoidAsync("navigator.clipboard.writeText", message.Content);
    }

    private async Task CopyMessageLink(MessageDTO message)
    {
        await _js.InvokeVoidAsync("navigator.clipboard.writeText", $"https://localhost:7283/chat/{Content.Id}/{message.Id}");
    }

    private async Task SendMessage()
    {
        Console.WriteLine("submitted!");
        if (!string.IsNullOrWhiteSpace(MessageModel.Content))
        {
            SendMessageRequestDTO msg = new() { };
            msg.Content = MessageModel.Content.Trim();
            msg.ReplyId = ReplyingTo?.Id;
            if (!string.IsNullOrWhiteSpace(Token))
            {
                var result = await _echoAPI.SendChatMessage(Token, Content.Id, msg);

            }
        }
    }

    private string prevKey = "";

    private DateTime prevDate = DateTime.MinValue;
    private UserMinimalDTO prevSender = new();

}