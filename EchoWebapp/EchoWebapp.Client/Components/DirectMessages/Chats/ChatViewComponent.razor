@using CoreLib.DTO.EchoCore.ChatCore.TextCore
@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.Entities.EchoCore.AccountCore
@using CoreLib.Entities.EchoCore.ChatCore
@using CoreLib.Handlers
@using EchoWebapp.Client.Components.Shared
@inject EchoAPI _echoAPI
@inject SignalRClientService _client
@inject ILocalStorageService LocalStorage
@inject IJSRuntime _js
@*
    Layout for the chatviewcomponent that exists within the directmessagesviewcomponent.

    This component shows the general chat layout, allowing the user to view existing messages and send new messages as well as pin them to a pinboard shared with the other members.

    Furthermore if the chatview displays a chat with more than 2 members it allows the user to view the members by expanding the memberlist
    Otherwise only two users are within the chat it allows the user to expand the userprofile of the other member.

    Also the chatview allows the user to start a call within the chat.

    The user can also choose to add new members to a chat.
    if the chat is a private chat then a new chat will be created with the new members and the existing members
    otherwise the members will be added to the chat.
*@
@* <h3>ChatViewComponent</h3> *@
@if (Content != null)
{
    <div>
        <div class="ma-0" style="width: 83vw; height: 5vh;">
            <MudPaper Elevation="2">
                <MudToolBar Class="d-flex flex-grow-1 gap-0 my-0">
                    @if (Content.Participants.Count() > 2)
                    {
                        <MudAvatar>
                            @* <MudImage Src="@Content.IconUrl" /> *@
                        </MudAvatar>
                        <MudText>@Content.Name</MudText>
                    }
                    else
                    {
                        <MudAvatar>
                            <MudImage Src="@Content.Participants.Where(e => e.Id != 112).First().ImageIconURL" />
                        </MudAvatar>
                        <MudText>@Content.Name</MudText>
                    }
                    <MudSpacer />
                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudIconButton Icon="@Icons.Material.Filled.Call" />
                        <MudIconButton Icon="@Icons.Material.Filled.PushPin" />
                        <MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" />
                    </MudPaper>
                    @if (Content.Participants.Count() > 2)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Group" Color="@(ToggleSidePanel ? Color.Primary : Color.Default)" OnClick="(()=> ToggleSidePanel = !ToggleSidePanel)" />
                        TextPlaceholder = "Message " + Content.Name;
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="@(ToggleSidePanel ? Color.Primary : Color.Default)" OnClick="(()=> ToggleSidePanel = !ToggleSidePanel)" />
                        TextPlaceholder = "Message @" + Content.Participants.Where(e => e.Id != 112).First().DisplayName;
                    }
                </MudToolBar>
            </MudPaper>
        </div>

        <div class="d-flex">
            <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                <div class="ma-0 overflow-auto" style="min-width: 70vw; height: 85vh;">

                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")" Class="overflow-auto">
                        @foreach (MessageDTO m in Content.Messages.OrderBy(e => e.TimeSent))
                        {
                            if (m.TimeSent.Date != prevDate.Date)
                            {
                                @if (m.TimeSent.Date == DateTime.Now.Date)
                                {
                                    <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                        <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <MudDivider FlexItem />
                                         </MudPaper>
                                         <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                             <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Today</MudText>
                                         </MudPaper>
                                         <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                             <MudDivider FlexItem />
                                         </MudPaper>
                                     </MudPaper>
                                }
                                else if (m.TimeSent.Date == DateTime.Now.AddDays(-1).Date)
                                {
                                    <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                        <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <MudDivider FlexItem />
                                         </MudPaper>
                                         <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                             <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Yesterday</MudText>
                                         </MudPaper>
                                         <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                             <MudDivider FlexItem />
                                         </MudPaper>
                                     </MudPaper>
                                }
                                else
                                {
                                    <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                        <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <MudDivider FlexItem />
                                         </MudPaper>
                                         <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                             <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.Day @m.TimeSent.ToString("MMMM") @m.TimeSent.Year</MudText>
                                            </MudPaper>
                                            <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudDivider FlexItem />
                                         </MudPaper>
                                     </MudPaper>
                                }

                            }
                            @if (prevSender == m.Sender && checkTime(m.TimeSent))
                            {

                                <MudPaper Elevation="0" class="d-flex flex-grow-1 px-4 align-center" Style="@($"background:{Colors.Shades.Transparent}")">
                                    <div class="d-flex flex-grow-1 gap-4 align-center">
                                        <MudAvatar Style="background-color:unset" Size="Size.Medium"></MudAvatar>
                                        <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                                        </MudPaper>
                                    </div>
                                </MudPaper>
                            }
                            else
                            {
                                <MudPaper Elevation="0" class="d-flex flex-grow-1 gap-4 px-4 pt-4 mt-2" Style="@($"background:{Colors.Shades.Transparent}")">
                                    <div class="d-flex flex-grow-1 gap-4">
                                        <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                                            @if (m.Sender != null)
                                            {
                                                <MudImage Src="@m.Sender.ImageIconURL"></MudImage>
                                            }
                                            else
                                            {
                                                @m.Sender?.DisplayName.First()
                                            }
                                        </MudAvatar>

                                        <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <div class="d-flex flex-grow-1 gap-3">
                                                <MudText Color="Color.Primary">@m.Sender?.DisplayName </MudText>
                                                    <MudText Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.ToString("HH:mm")</MudText>
                                                </div>
                                                <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                                            </MudPaper>
                                        </div>
                                    </MudPaper>
                            }

                            prevDate = m.TimeSent;
                            prevSender = m.Sender;
                        }
                    </MudPaper>

                </div>
                <MudToolBar Class="d-flex flex-column-reverse flex-grow-1 gap-0 my-5" Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudTextField FullWidth @bind-Value="TextValue" Margin="Margin.Dense" Variant="Variant.Filled" OnKeyDown="SendMessage" AutoGrow MaxLines="11" Placeholder="@TextPlaceholder" Class="px-5 py-2" Immediate="true" MaxLength="1000" TextUpdateSuppression="false" Style="background: var(--mud-palette-dark);opacity:1;">
                     </MudTextField>
                     @* <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="SendMessage" ButtonType="ButtonType.Button" /> *@
                 </MudToolBar>
             </MudPaper>

             @if (Content?.Participants?.Count() > 2)
            {
                <!-- remove logic of removing yourself to before sending content -->
                <MemberListComponent Visible="ToggleSidePanel" Members="@Content?.Participants?.ToList()" />
            }
            else
            {
                <ChatUserProfileComponent Visible="ToggleSidePanel" Member="@Content?.Participants?.Where(e => e.Id != 112).First()" />
            }

        </div>

    </div>


}


@code {
    
    [Parameter]
    // public Chat? Content { get; set; }
    public ChatDTO? Content { get; set; }
    [Parameter]
    public UserFullDTO self { get; set; }

    private string? token { get; set; }
    public bool ToggleSidePanel = false;

    public string TextValue { get; set; }
    public string TextPlaceholder { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // we need to get the token like this now or the string will be '"Token value"'
            token = await LocalStorage.GetItemAsync<string>("Token");
            await _client.Connect(token);
            _client.ReceiveChatMessageCreateMessageDTO += ReceiveChatMessageCreateMessageDTO;
            _client.ReceiveChatMessageUpdateMessageDTO += ReceiveChatMessageUpdateMessageDTO;
            _client.ReceiveChatMessageDeleteMessageDTO += ReceiveChatMessageDeleteMessageDTO;
            //Content = await _echoAPI.GetEntityWithIncludeAsync<Chat>(self.Id, (new AuthenticationHeaderValue("Bearer", token)));
            //eller skal det være Id'en for chat'en? + er det ik sådan man skal gære det
            await _client.SendAJoinRequestForGroup(nameof(Chat) +"/"+ Content.Id);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    bool checkTime(DateTime dt)
    {
        return (dt.Date == prevDate.Date) && (dt.Hour == prevDate.Hour) && (dt.Minute < prevDate.AddMinutes(7).Minute);
    }
    private async Task SendMessage(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" && prevKey is not "Shift")
        {
            //     TextValue += e.Key;

            //     _js.InvokeVoidAsync("console.log", e.Key);
            // }
            // else if (!(e.Key is "Enter" or "NumppadEnter"))
            // {
            //     TextValue += e.Key;

            //     _js.InvokeVoidAsync("console.log", e.Key);
            // }
            // else
            // {
            if (!string.IsNullOrWhiteSpace(TextValue))
            {
                // skal det ik være en SendMessageRequestDTO?
                MessageDTO newmsg = new();
                newmsg.Content = TextValue.Trim();
                newmsg.TimeSent = DateTime.Now;
                newmsg.Sender = new UserMinimalDTO()
                    {
                        Id = 112,
                        ImageIconURL = "https://us.tonies.com/cdn/shop/products/Tonies-PDP-Assets-Nemo-Single.jpg",
                        DisplayName = "John Doe",
                    };
                //code to reflect your id

                Content.Messages.Add(newmsg);
                //skal lige snakke om hvordan vi vil gøre det 
                //await _echoAPI.CreateAsync<ChatDTO>(newmsg, (new AuthenticationHeaderValue("Bearer", token));
                _js.InvokeVoidAsync("console.log", newmsg.Content);

                await Task.Delay(50);
                TextValue = string.Empty;
                await InvokeAsync(StateHasChanged);
            }
        }
        prevKey = e.Key;
        _js.InvokeVoidAsync("console.log", e.Key);
    }

    /*public async void JoinGroup(string GroupName)
    {
    }*/

    public async void ReceiveChatMessageCreateMessageDTO(MessageDTO entity)
    {
        Content.Messages.Add(entity);
        await InvokeAsync(StateHasChanged);
    }

    //don't know if thats all it takes
    public async void ReceiveChatMessageUpdateMessageDTO(MessageDTO entity)
    {
        var updatevalue = Content.Messages.FirstOrDefault(o =>o.Id == entity.Id);
        updatevalue.Content = entity.Content;
        await InvokeAsync(StateHasChanged);
    }

    public async void ReceiveChatMessageDeleteMessageDTO(MessageDTO entity)
    {
        Content.Messages.Remove(entity);
        await InvokeAsync(StateHasChanged);
    }

    private string prevKey = "";

    private DateTime prevDate = DateTime.MinValue;
    private UserMinimalDTO prevSender = new();
}