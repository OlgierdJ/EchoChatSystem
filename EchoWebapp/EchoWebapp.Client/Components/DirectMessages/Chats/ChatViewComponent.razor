@using CoreLib.Entities.EchoCore.AccountCore
@using CoreLib.Entities.EchoCore.ChatCore
@*
    Layout for the chatviewcomponent that exists within the directmessagesviewcomponent.

    This component shows the general chat layout, allowing the user to view existing messages and send new messages as well as pin them to a pinboard shared with the other members.

    Furthermore if the chatview displays a chat with more than 2 members it allows the user to view the members by expanding the memberlist
    Otherwise only two users are within the chat it allows the user to expand the userprofile of the other member.

    Also the chatview allows the user to start a call within the chat.

    The user can also choose to add new members to a chat. 
    if the chat is a private chat then a new chat will be created with the new members and the existing members
    otherwise the members will be added to the chat.
*@
@* <h3>ChatViewComponent</h3> *@
<div class="ma-0 overflow-auto">
@if (Content != null)
{
    @foreach (ChatMessage m in Content.Messages.OrderBy(e => e.TimeSent))
    {
        if (m.TimeSent.Date != prevDate.Date)
        {
            @if (m.TimeSent.Date == DateTime.Now.Date)
            {
                <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudDivider FlexItem />
                     </MudPaper>
                     <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Today</MudText>
                     </MudPaper>
                     <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudDivider FlexItem />
                     </MudPaper>
                 </MudPaper>
            }
            else if (m.TimeSent.Date == DateTime.Now.AddDays(-1).Date)
            {
                <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudDivider FlexItem />
                     </MudPaper>
                     <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Yesterday</MudText>
                     </MudPaper>
                     <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudDivider FlexItem />
                     </MudPaper>
                 </MudPaper>
            }
            else
            {
                <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudDivider FlexItem />
                     </MudPaper>
                     <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.Day @m.TimeSent.ToString("MMMM") @m.TimeSent.Year</MudText>
                        </MudPaper>
                        <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                            <MudDivider FlexItem />
                     </MudPaper>
                 </MudPaper>
            }

        }
        @if (prevSender == m.Author && checkTime(m.TimeSent))
        {

            <MudPaper Elevation="0" class="d-flex flex-grow-1 px-4 align-center" Style="@($"background:{Colors.Shades.Transparent}")">
                <div class="d-flex flex-grow-1 gap-4 align-center">
                    <MudAvatar Style="background-color:unset" Size="Size.Medium"></MudAvatar>
                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                    </MudPaper>
                </div>
            </MudPaper>
        }
        else
        {
            <MudPaper Elevation="0" class="d-flex flex-grow-1 gap-4 px-4 pt-4 mt-2" Style="@($"background:{Colors.Shades.Transparent}")">
                <div class="d-flex flex-grow-1 gap-4">
                    <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                        @if (m.Author?.Profile != null)
                        {
                            <MudImage Src="@m.Author.Profile.AvatarFileURL"></MudImage>
                        }
                        else
                        {
                            @m.Author?.Name.First()
                        }
                    </MudAvatar>

                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <div class="d-flex flex-grow-1 gap-3">
                            <MudText Color="Color.Primary">@m.Author?.Name </MudText>
                                <MudText Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.ToString("HH:mm")</MudText>
                            </div>
                            <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                        </MudPaper>
                    </div>
                </MudPaper>
        }

        prevDate = m.TimeSent;
        prevSender = m.Author;
    }
}
</div>

@code {
    [Parameter]
    public Chat? Content { get; set; }

    bool checkTime(DateTime dt)
    {
        return (dt.Date == prevDate.Date) && (dt.Hour == prevDate.Hour) && (dt.Minute < prevDate.AddMinutes(7).Minute);
    }
    private DateTime prevDate = DateTime.MinValue;
    private Account prevSender = new();
}
