@using CoreLib.DTO.EchoCore.ChatCore.TextCore
@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.Entities.EchoCore.AccountCore
@using CoreLib.Entities.EchoCore.ChatCore
@using CoreLib.Handlers
@using EchoWebapp.Client.Components.Shared
@inject EchoAPI _echoAPI
@inject SignalRClientService _client
@inject ILocalStorageService LocalStorage
@inject IJSRuntime _js
@inject IScrollManager Scroll

@*
    Layout for the chatviewcomponent that exists within the directmessagesviewcomponent.

    This component shows the general chat layout, allowing the user to view existing messages and send new messages as well as pin them to a pinboard shared with the other members.

    Furthermore if the chatview displays a chat with more than 2 members it allows the user to view the members by expanding the memberlist
    Otherwise only two users are within the chat it allows the user to expand the userprofile of the other member.

    Also the chatview allows the user to start a call within the chat.

    The user can also choose to add new members to a chat.
    if the chat is a private chat then a new chat will be created with the new members and the existing members
    otherwise the members will be added to the chat.
*@
@* <h3>ChatViewComponent</h3> *@
@if (Content != null)
{
    <div>
        <div class="ma-0" style="width: 83vw; height: 5vh;">
            <MudPaper Elevation="0">
                <MudToolBar Class="d-flex flex-grow-1 gap-0 my-0">
                    @if (Content.Participants.Count() > 2)
                    {
                        <MudAvatar>
                            @* <MudImage Src="@Content.IconUrl" /> *@
                        </MudAvatar>
                        <MudText>@Content.Name</MudText>
                    }
                    else
                    {
                        <MudAvatar>
                            <MudImage Src="@Content?.Participants?.Where(e => e.Id != self.Id).First().ImageIconURL" />
                        </MudAvatar>
                        <MudText Class="ml-2">@Content?.Participants?.Where(e => e.Id != self.Id).First().DisplayName</MudText>
                    }
                    <MudSpacer />
                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudIconButton Icon="@Icons.Material.Filled.Call" />
                        <MudIconButton Icon="@Icons.Material.Filled.PushPin" />
                        <MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" OnClick="ToggleAddFriends" />
                    </MudPaper>
                    @if (Content.Participants.Count() > 2)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Group" Color="@(DisplaySidePanel ? Color.Primary : Color.Default)" OnClick="ToggleSidePanel" />
                        TextPlaceholder = "Message " + Content.Name;
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="@(DisplaySidePanel ? Color.Primary : Color.Default)" OnClick="ToggleSidePanel" />
                        TextPlaceholder = "Message @" + Content?.Participants?.Where(e => e.Id != self.Id).First().DisplayName;
                    }
                </MudToolBar>
            </MudPaper>
        </div>

        <div class="d-flex" style="width: 83vw;">
            <MudPaper Elevation="0" Class="py-2" Style="@($"background:{Colors.Shades.Transparent};float: left;")" Width="83vw" Height="85vh">

                <MudList id="MessageList" Class="my-4 py-0 overflow-auto" Style="@($"background:{Colors.Shades.Transparent}; width: 100%; height: 100%;")">
                    <MudListItem>
                        <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")" Class="overflow-auto">
                            @foreach (MessageDTO m in Content.Messages.OrderBy(e => e.TimeSent))
                            {
                                if (m.TimeSent.Date != prevDate.Date)
                                {
                                    @if (m.TimeSent.Date == DateTime.Now.Date)
                                    {
                                        <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudDivider FlexItem />
                                             </MudPaper>
                                             <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                 <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Today</MudText>
                                             </MudPaper>
                                             <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                 <MudDivider FlexItem />
                                             </MudPaper>
                                         </MudPaper>
                                    }
                                    else if (m.TimeSent.Date == DateTime.Now.AddDays(-1).Date)
                                    {
                                        <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudDivider FlexItem />
                                             </MudPaper>
                                             <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                 <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Yesterday</MudText>
                                             </MudPaper>
                                             <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                 <MudDivider FlexItem />
                                             </MudPaper>
                                         </MudPaper>
                                    }
                                    else
                                    {
                                        <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                            <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudDivider FlexItem />
                                             </MudPaper>
                                             <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                 <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.Day @m.TimeSent.ToString("MMMM") @m.TimeSent.Year</MudText>
                                                </MudPaper>
                                                <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                    <MudDivider FlexItem />
                                             </MudPaper>
                                         </MudPaper>
                                    }

                                }
                                @if (prevSender == m.Sender && checkTime(m.TimeSent))
                                {

                                    <MudPaper Elevation="0" class="d-flex flex-grow-1 px-4 align-center" Style="@($"background:{Colors.Shades.Transparent}")">
                                        <div class="d-flex flex-grow-1 gap-4 align-center">
                                            <MudAvatar Style="background-color:unset" Size="Size.Medium"></MudAvatar>
                                            <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                                            </MudPaper>
                                        </div>
                                    </MudPaper>
                                }
                                else
                                {
                                    <MudPaper Elevation="0" class="d-flex flex-grow-1 gap-4 px-4 pt-4 mt-2" Style="@($"background:{Colors.Shades.Transparent}")">
                                        <div class="d-flex flex-grow-1 gap-4">
                                            <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                                                @if (m.Sender != null)
                                                {
                                                    <MudImage Src="@m.Sender.ImageIconURL"></MudImage>
                                                }
                                                else
                                                {
                                                    @m.Sender?.DisplayName.First()
                                                }
                                            </MudAvatar>

                                            <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                                                <div class="d-flex flex-grow-1 gap-3">
                                                    <MudText Color="Color.Primary">@m.Sender?.DisplayName </MudText>
                                                        <MudText Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.ToString("HH:mm")</MudText>
                                                    </div>
                                                    <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                                                </MudPaper>
                                            </div>
                                        </MudPaper>
                                }

                                prevDate = m.TimeSent;
                                prevSender = m.Sender;
                            }
                        </MudPaper>
                    </MudListItem>
                </MudList>

                <MudToolBar Class="d-flex flex-column-reverse flex-grow-1 gap-0 py-0 my-0" Style="@($"background:{Colors.Shades.Transparent}; height: 5vh;")">
                    <MudTextField FullWidth @bind-Value="TextValue" Margin="Margin.Dense" Variant="Variant.Filled" OnKeyDown="SendMessage" AutoGrow MaxLines="11" Placeholder="@TextPlaceholder" Class="px-5 py-2" Immediate="true" MaxLength="1000" TextUpdateSuppression="false" Style="background: var(--mud-palette-dark);opacity:1; margin-top: 10px;">
                     </MudTextField>
                     @* <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="SendMessage" ButtonType="ButtonType.Button" /> *@
                 </MudToolBar>
             </MudPaper>

             @if (Content?.Participants?.Count() > 2)
            {
                <MemberListComponent Visible="DisplaySidePanel" Members="@Content?.Participants?.ToList()" />
            }
            else
            {
                <ChatUserProfileComponent Visible="DisplaySidePanel" Member="@Content?.Participants?.Where(e => e.Id != self.Id).First()" />
            }

        </div>

    </div>

    <MudOverlay Visible="DisplayAddFriends" DarkBackground="true" ZIndex="2">
        <MudPaper Width="20vw" Height="30vh" Style="background: var(--mud-palette-dark);" Class="d-flex align-content-center justify-center flex-column  flex-grow-1 gap-12" Elevation="2">
            <MudButton Style="position: absolute; top: 15px; right: 15px; height: 25px;" Color="Color.Error" Variant="Variant.Filled" OnClick="ToggleAddFriends">x</MudButton>
            <MudText Typo="Typo.h5" Align="Align.Center" Style="padding-top: 15px;">SELECT FRIENDS</MudText>

             <MudSelect T="UserDTO" Label="Friends" MultiSelection="true" SelectedValues="@selectedFriends" SelectedValuesChanged="SelectedValuesChanged"
                       AnchorOrigin="Origin.BottomCenter" PopoverClass="fixed">
                
                @foreach (UserDTO f in friends)
                {
                    <MudSelectItem Value="@f">
                        <MudAvatar>
                            <MudImage Src="@f.ImageIconURL" />
                        </MudAvatar>
                        <MudText Class="pl-3" Typo="Typo.caption">@f.DisplayName</MudText>
                    </MudSelectItem>
                }

            </MudSelect>
            <MudButton Class="align-self-center justify-center" Color="Color.Primary" Variant="Variant.Filled" OnClick="AddFriends">Add</MudButton>            
        </MudPaper>
    </MudOverlay>
}

@code {

    [Parameter]
    public ChatDTO? Content { get; set; }

    [Parameter]
    public UserFullDTO self { get; set; }

    public ICollection<UserDTO> friends { get; set; }

    private ICollection<UserDTO> selectedFriends { get; set; }
    private UserDTO selected { get; set; }

    private string? token { get; set; }
    public bool DisplaySidePanel = false;
    public bool DisplayAddFriends = false;

    public string TextValue { get; set; }
    public string TextPlaceholder { get; set; }

    public string searchFriendText { get; set; }

    private void SelectedValuesChanged(IEnumerable<UserDTO> values)
    {
        this.selectedFriends = values.ToList();
    }

    public async void ToggleSidePanel()
    {
        DisplaySidePanel = !DisplaySidePanel;
        await InvokeAsync(StateHasChanged);
    }
    public async void ToggleAddFriends()
    {
        DisplayAddFriends = !DisplayAddFriends;
        await InvokeAsync(StateHasChanged);
    }
    public async void FilterFriends(string s)
    {
        if (!String.IsNullOrEmpty(searchFriendText))
        {
            friends = self.Friends.Where(e => e.DisplayName.Contains(searchFriendText) || e.Name.Contains(searchFriendText)).ToList();
        }
        else
        {
            friends = self?.Friends?.ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void AddFriends()
    {
        if (selectedFriends.Count > 0)
        {
            var token = await LocalStorage.GetItemAsStringAsync("Token");
            if (!string.IsNullOrWhiteSpace(token))
            {
                if (selectedFriends.Count == 1){
                    var result = await _echoAPI.AddChatParticipant(token, Content.Id, selectedFriends.First().Id);
                    if (result)
                    {
                        await Task.Delay(50);
                        selectedFriends.Clear();
                        await InvokeAsync(StateHasChanged);
                    }
                }
                if (selectedFriends.Count > 1){
                    //think it isnt working, probably select done wrong, but 6am so meh. tomorrows issue
                    var result = await _echoAPI.AddChatParticipants(token, Content.Id, selectedFriends.Select(e=>e.Id).ToList());
                    if (result)
                    {
                        await Task.Delay(50);
                        selectedFriends.Clear();
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            friends = self?.Friends?.ToList();
            var token = await LocalStorage.GetItemAsStringAsync("Token");
            // await _client.Connect(token);
            // Console.WriteLine(token);
            // _client.ReceiveChatMessageCreateMessageDTO += ReceiveChatMessageCreateMessageDTO;
            // _client.ReceiveChatMessageUpdateMessageDTO += ReceiveChatMessageUpdateMessageDTO;
            // _client.ReceiveChatMessageDeleteMessageDTO += ReceiveChatMessageDeleteMessageDTO;
            // //Content = await _echoAPI.GetEntityWithIncludeAsync<Chat>(self.Id, (new AuthenticationHeaderValue("Bearer", token)));
            //eller skal det være Id'en for chat'en? + er det ik sådan man skal gære det
            // await _client.SendAJoinRequestForGroup(nameof(Chat) +"/"+ Content.Id);
        }
        await base.OnAfterRenderAsync(firstRender);
        await Scroll.ScrollToBottomAsync("#MessageList", ScrollBehavior.Smooth);
    }

    protected override async Task OnInitializedAsync()
    {
        OnChanged += OnChangedHandler;
        await base.OnInitializedAsync();
    }

    private async void OnChangedHandler()
    {
        await InvokeAsync(StateHasChanged);
    }

    public event Action OnChanged;

    bool checkTime(DateTime dt)
    {
        return (dt.Date == prevDate.Date) && (dt.Hour == prevDate.Hour) && (dt.Minute < prevDate.AddMinutes(7).Minute);
    }
    private async Task SendMessage(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" && prevKey is not "Shift")
        {
            //     TextValue += e.Key;

            //     _js.InvokeVoidAsync("console.log", e.Key);
            // }
            // else if (!(e.Key is "Enter" or "NumppadEnter"))
            // {
            //     TextValue += e.Key;

            //     _js.InvokeVoidAsync("console.log", e.Key);
            // }
            // else
            // {
            if (!string.IsNullOrWhiteSpace(TextValue))
            {
                SendMessageRequestDTO msg = new();
                msg.Content = TextValue.Trim();

                var token = await LocalStorage.GetItemAsStringAsync("Token");
                if (!string.IsNullOrWhiteSpace(token))
                {
                    var result = await _echoAPI.SendChatMessage(token, Content.Id, msg);
                    if (result)
                    {
                        await Task.Delay(50);
                        TextValue = string.Empty;
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
            prevKey = e.Key;
        }
    }

    /*public async void JoinGroup(string GroupName)
    {
    }*/

    public async void ReceiveChatMessageCreateMessageDTO(MessageDTO entity)
    {
        Content.Messages.Add(entity);
        await InvokeAsync(StateHasChanged);
    }

    //don't know if thats all it takes
    public async void ReceiveChatMessageUpdateMessageDTO(MessageDTO entity)
    {
        var updatevalue = Content.Messages.FirstOrDefault(o => o.Id == entity.Id);
        updatevalue.Content = entity.Content;
        await InvokeAsync(StateHasChanged);
    }

    public async void ReceiveChatMessageDeleteMessageDTO(MessageDTO entity)
    {
        Content.Messages.Remove(entity);
        await InvokeAsync(StateHasChanged);
    }

    private string prevKey = "";

    private DateTime prevDate = DateTime.MinValue;
    private UserMinimalDTO prevSender = new();

}