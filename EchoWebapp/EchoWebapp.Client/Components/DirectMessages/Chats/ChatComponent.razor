@page "/chat/{ChatIdString}"
@using CoreLib.DTO.EchoCore.ChatCore.TextCore
@using CoreLib.Entities.EchoCore.ChatCore
@using CoreLib.WebAPI.EchoClient
@inject IUserContainer SessionRepository
@inject ILocalStorageService localStorage
@inject EchoAPIClient _api
@implements IDisposable
@inject IJSRuntime _js
@*
    Chat layout for when it exists within the scrollable list in the direct message section.

    This component should either reflect the other member than the user itself if there is only 2 members within the chat.
    Otherwise reflect the chat name and image.
*@
@if(Chat != null)
{
    <div @onmouseover="MouseOver" @onmouseout="MouseOut">
        <div style="float: left; width: 80%;">
            @if (Chat.Participants.Count() > 2)
            {
                <MudAvatar>
                    @if (!string.IsNullOrWhiteSpace(Chat.IconUrl))
                    {
                        <MudImage Src="@Chat.IconUrl" />
                    }
                    else
                    {
                        @Chat.Name.First()
                    }
                </MudAvatar>
                <MudText Typo="Typo.caption">@Chat.Name</MudText>
            }
            else //chat between 2 users
            {
                <MudAvatar>
                    <MudImage Src="@Chat.Participants.Where(e => e.Id != OwnId).First().ImageIconURL" />
                </MudAvatar>
                <MudText Typo="Typo.caption">@Chat.Participants.Where(e => e.Id != OwnId).First().DisplayName</MudText>
            }
        </div>
        <div style="float: right; width: 20%; visibility: @(hideChatVisibility ? "none" : "hidden");">
            <MudIconButton OnClick=HideChat Class="align-end" Icon="@Icons.Material.Filled.Close" ></MudIconButton>
        </div>
    </div>
}

@code {
    [Parameter] 
    public string? ChatIdString
    {
        get { return ChatId.ToString(); }
        set
        {
            if(value != null)
            {
                ChatId = Convert.ToUInt64(value);
                RedirectedToChat();
            }
        }
    }
    [Parameter]
    public ulong ChatId { get; set; }

    public ChatDTO Chat { get; set; }

    [Parameter]
    public ulong OwnId { get; set; }

    bool hideChatVisibility = false;
    void MouseOver(MouseEventArgs e) { hideChatVisibility = true; }
    void MouseOut(MouseEventArgs e) { hideChatVisibility = false; }

    protected override Task OnInitializedAsync()
    {
        SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured;
        return base.OnInitializedAsync();
    }

    public string Token { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Token = await localStorage.GetItemAsStringAsync("Token");
            // SessionRepository.SessionChangeOccured += SessionRepository_SessionChangeOccured; 
            Chat = SessionRepository.self.DirectMessages.Where(e => e.Id == ChatId).FirstOrDefault();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    public async void RedirectedToChat()
    {       
        //Chat = SessionRepository.self.DirectMessages.Where(e => e.Id == ChatId).FirstOrDefault();
        StateHasChanged();        
    }
    public async void HideChat()
    {
        var token = await localStorage.GetItemAsStringAsync("Token");
        await _api.HideChat(token, Chat.Id);
    }
    public void Dispose()
    {
        SessionRepository.SessionChangeOccured -= SessionRepository_SessionChangeOccured;
    }

    private async void SessionRepository_SessionChangeOccured()
    {
        await InvokeAsync(StateHasChanged);
    }
}
