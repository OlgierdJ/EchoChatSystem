@page "/login"
@using CoreLib.DTO.EchoCore.RequestCore
@using MudBlazor
@using CoreLib.WebAPI
@using System.ComponentModel.DataAnnotations
@inject NavigationManager nav
@inject EchoAPI _echoAPI
@inject ILocalStorageService LocalStorage
@inject Provider.AccountIdContainer AccountContainer
@rendermode InteractiveAuto

<div id="unique_id_scroll_section" class="ma-0" style="height:100vh;overflow: auto;">
    <MudPaper Width="60%" Style="margin: 20%; padding: 50px 100px 50px 100px">
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
            <MudText Align="Align.Center" Typo="Typo.h4">ECHO LOGIN</MudText>
            <MudTextField @ref="emailField" @bind-Value="email" Label="EMAIL " Variant="Variant.Filled" InputType="InputType.Email" Required RequiredError="Please enter your email" Validation="@(new EmailAddressAttribute() {ErrorMessage = "Enter a valid email address"})" />
             <MudTextField T="string" Label="PASSWORD " HelperText="Never share your password!" @bind-Value="password"
                           InputType="@PasswordInput" Variant="Variant.Filled"
                           Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                           RequiredError="Password is required!"
                           Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                           OnAdornmentClick="PasswordVisibility" AdornmentAriaLabel="Show Password" />
             <MudText>
                 <MudButton class="pt-0 pb-4" Variant="Variant.Text" OnClick="ResetPassword" Color="Color.Primary">Forgor your password?</MudButton>
             </MudText>
             <MudButton class="pt-2 mb-4" Variant="Variant.Filled" OnClick="AuthorizeLogin" Color="Color.Success" Disabled="!success">Login</MudButton>
             <MudText>
                 Need an account?
                 <MudButton class="pt-2" Variant="Variant.Text" OnClick="GoToRegister" Color="Color.Primary">Register</MudButton>
             </MudText>
         </MudForm>
     </MudPaper>
 </div>

 @code {
    public string password { get; set; } = "";
    public string email { get; set; } = "";
    public MudTextField<string> emailField;
    LoginRequestDTO User = new();

    bool success;
    string[] errors = { };

    bool visible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void PasswordVisibility()
    {
        if (visible)
        {
            visible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            visible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
    }

    //maybe receive status and display error
    async Task AuthorizeLogin()
    {
        User.Email = email;
        User.Password = password;

        //send user to api
        var result = await _echoAPI.LoginAsync(User);
        AccountContainer.SetValue(result);
        await LocalStorage.SetItemAsync("UserId", AccountContainer.Value);
        nav.NavigateTo("/");
    }

    async void ResetPassword()
    {
        emailField.Validate();
        if (emailField.ValidationErrors.Count == 0)
        {
            //send confirmation mail, to the mail in email field
            Thread.Sleep(500);
            //once confirmed, forward to resetpassword, or through link in mail
            nav.NavigateTo("/reset-password");
        }

    }

    void GoToRegister()
    {
        nav.NavigateTo("/register");
    }
}