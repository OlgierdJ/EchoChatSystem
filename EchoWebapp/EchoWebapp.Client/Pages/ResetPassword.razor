@page "/reset-password"
@using CoreLib.DTO.RequestCore.UserCore
@using MudBlazor
@using CoreLib.WebAPI
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject NavigationManager nav
@rendermode InteractiveAuto

<div id="unique_id_scroll_section" class="ma-0" style="height:100vh;overflow: auto;">
    <MudPaper Width="60%" Style="margin: 20%; padding: 50px 100px 50px 100px">
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
            <MudText Align="Align.Center" Typo="Typo.h4">RESET PASSWORD</MudText>
            <MudTextField T="string" Label="PASSWORD " HelperText="Pick a strong password and keep it secret!" @bind-Value="password"
                          InputType="InputType.Password" Variant="Variant.Filled"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!" />
            <MudTextField T="string" Label="PASSWORD " HelperText=" " @bind-Value="repeatpw"
                          InputType="InputType.Password" Variant="Variant.Filled"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!" />
            <MudButton class="pt-2 mt-4" Variant="Variant.Filled" OnClick="UpdatePassword" Color="Color.Success" Disabled="!success">Update Password</MudButton>
        </MudForm>
    </MudPaper>
</div>

@code {
    public string password { get; set; } = "";
    public string repeatpw { get; set; } = "";
    public readonly EchoAPI _echoAPI = new();
    LoginRequestDTO User = new();

    bool success;
    string[] errors = { };

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (password.Length > 0 && repeatpw.Length > 0)
        {
            if (password != repeatpw)
            {
                yield return "Passwords does not match";
            }
        }
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    async void UpdatePassword()
    {
        //userid from token?
        ulong testid = 4;
        // var result = await _echoAPI.UpdatePasswordAsync(new UpdatePasswordRequestDTO { NewPassword = password });
        // if(result)nav.NavigateTo("/login");
    }
}