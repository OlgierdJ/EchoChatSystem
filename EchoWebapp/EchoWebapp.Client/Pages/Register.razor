@page "/register"
@using CoreLib.Models
@using MudBlazor
@inject NavigationManager nav
@rendermode InteractiveAuto

<div id="unique_id_scroll_section" class="ma-0" style="height:100vh;overflow: auto;">
    <MudPaper Width="60%" Style="margin: 20%; padding: 50px 100px 50px 100px">
        <MudText Align="Align.Center" Typo="Typo.h4">ECHO REGISTER</MudText>
        <MudTextField @bind-Value="email" Label="EMAIL " Variant="Variant.Filled" InputType="InputType.Email" Required RequiredError="Please enter your email" /> <!--  Adornment="Adornment.End" AdornmentIcon="Icons.Material.Filled.Email" -->
        <MudTextField @bind-Value="displayName" Label="DISPLAY NAME " Variant="Variant.Filled" InputType="InputType.Text" /> <!--  Adornment="Adornment.End" AdornmentIcon="Icons.Material.Filled.Email" -->
        <MudTextField @bind-Value="username" Label="USERNAME " Variant="Variant.Filled" InputType="InputType.Text" Required RequiredError="Please choose a valid Username" /> <!--  Adornment="Adornment.End" AdornmentIcon="Icons.Material.Filled.Email" -->
        <MudTextField @bind-Value="password" Label="PASSWORD " Variant="Variant.Filled" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="PasswordVisibility" AdornmentAriaLabel="Show Password" Required RequiredError="Please enter a password" />
        <MudDatePicker @bind-Date="date" Label="DATE OF BIRTH " Variant="Variant.Filled" DateFormat="dd/MM/yyyy" Editable=false Required RequiredError="Please pick your date of birth" MinDate="@DateTime.UtcNow.AddYears(-18)"/>
         <MudCheckBox @bind-Value="allowmail" Label="Allow Echo to send you mail" />
        <MudButton class="pt-2" Variant="Variant.Filled" OnClick="RegisterUser">Register</MudButton>
        <MudButton class="pt-2" Variant="Variant.Text" OnClick="GoToLogin">Already have an account?</MudButton>
    </MudPaper>
</div>

 @code {
    public string password { get; set; } = "";
    public string email { get; set; } = "";
    public string displayName { get; set; } = "";
    public string username { get; set; } = "";
    public bool allowmail { get; set; } = true;
    public DateTime? date { get; set; } = DateTime.UtcNow;

    public RegisterUserModel User = new();

    bool visible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void PasswordVisibility()
    {
        if (visible)
        {
            visible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            visible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    //maybe receive status and display error
    void RegisterUser()
    {
        User.Email = email;
        User.Password = password;
        User.Username = username;
        User.AllowEchoMails = allowmail;
        User.DateOfBirth = date.Value;
        User.DisplayName = displayName != "" ? displayName : null;
        //send user to api
    }

    void GoToLogin()
    {
        nav.NavigateTo("/login");
    }
}