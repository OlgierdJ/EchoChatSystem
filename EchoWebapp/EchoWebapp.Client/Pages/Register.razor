@page "/register"
@using CoreLib.DTO.RequestCore.UserCore
@using CoreLib.Entities.EchoCore.UserCore
@using CoreLib.WebAPI
@using MudBlazor
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject NavigationManager nav
@inject EchoAPI _echoAPI
@rendermode InteractiveAuto

@if (Alert)
{
    <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Time to leave. Please close me!</MudAlert>
}

<div id="unique_id_scroll_section" class="ma-0" style="height:100vh;overflow: auto;">
    <MudPaper Width="60%" Style="margin: 20%; padding: 50px 100px 50px 100px">
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
            <MudText Align="Align.Center" Typo="Typo.h4">ECHO REGISTER</MudText>
            <MudTextField @bind-Value="email" Label="EMAIL " Variant="Variant.Filled" InputType="InputType.Email" Required RequiredError="Please enter your email" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" /> 
            <MudTextField @bind-Value="displayName" Label="DISPLAY NAME " Variant="Variant.Filled" InputType="InputType.Text" /> 
            <MudTextField @bind-Value="username" Label="USERNAME " Variant="Variant.Filled" InputType="InputType.Text" Required RequiredError="Please choose a valid Username" /> 
            <MudTextField T="string" Label="PASSWORD " HelperText="Choose a strong password" @bind-Value="password"
                           InputType="@PasswordInput" Variant="Variant.Filled"
                           Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                           RequiredError="Password is required!"
                           Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" 
                           OnAdornmentClick="PasswordVisibility" AdornmentAriaLabel="Show Password" />
             <MudDatePicker @bind-Date="date" Label="DATE OF BIRTH " Variant="Variant.Filled" DateFormat="dd/MM/yyyy" Editable=false Required RequiredError="Please pick your date of birth" MaxDate="@DateTime.UtcNow.AddYears(-18)" />
             <MudCheckBox @bind-Value="allowmail" Label="Allow Echo to send you mail" />
             <MudButton class="pt-2" Variant="Variant.Filled" OnClick="RegisterUser" Color="Color.Success" Disabled="!success">Register</MudButton>
             <MudButton class="pt-2" Variant="Variant.Text" OnClick="GoToLogin" Color="Color.Primary">Already have an account?</MudButton>
         </MudForm>
     </MudPaper>
 </div>

 @code {
    public string password { get; set; } = "";
    public string email { get; set; } = "";
    public string displayName { get; set; } = "";
    public string username { get; set; } = "";
    public bool allowmail { get; set; } = true;
    public DateTime? date { get; set; } = DateTime.UtcNow.AddYears(-18);
    private bool Alert = false;

    public RegisterRequestDTO User = new();
    // public readonly EchoAPI _echoAPI = new();

    bool success;
    string[] errors = { };

    bool visible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void PasswordVisibility()
    {
        if (visible)
        {
            visible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            visible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    //maybe receive status and display error
    async Task RegisterUser()
    {
        User.Email = email;
        User.Password = password;
        User.Username = username;
        User.AllowEchoMails = allowmail;
        User.DateOfBirth = date.Value;
        User.DisplayName = displayName != "" ? displayName : null;
        //send user to api
        var data = await _echoAPI.CreateUserAsync(User);
        if(data != null)
        {
            if (data.Equals("all looks good"))
            {
                GoToLogin();
            }
            else
            {
                CloseMe(true);
            }
        }
    }

    private void CloseMe(bool value)
    {
        Alert = value;
    }

    void GoToLogin()
    {
        nav.NavigateTo("/login");
    }
}