@page "/channels"
@rendermode InteractiveAuto
@inject IJSRuntime _js
@using CoreLib.Entities.EchoCore.AccountCore
@using CoreLib.Entities.EchoCore.ChatCore
@using MudBlazor
<PageTitle>Counter</PageTitle>

<div style="height:5vh;">

    <MudText Typo="Typo.h5" Class="mt-2 ml-2">
        <MudIcon Icon="@Icons.Material.Filled.Grid3x3" />
        general
    </MudText>
</div>

<div id="unique_id_scroll_section" class="ma-0" style="max-height:80vh;height:80vh;overflow: auto;">

    @foreach (ChatMessage m in chat.Messages)
    {
        if (m.TimeSent.Date != prevDate.Date)
        {
            @if (m.TimeSent.Date == DateTime.Now.Date)
            {
                <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudDivider FlexItem />
                     </MudPaper>
                     <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Today</MudText>
                     </MudPaper>
                     <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudDivider FlexItem />
                     </MudPaper>
                 </MudPaper>
            }
            else if (m.TimeSent.Date == DateTime.Now.AddDays(-1).Date)
            {
                <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudDivider FlexItem />
                     </MudPaper>
                     <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">Yesterday</MudText>
                     </MudPaper>
                     <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudDivider FlexItem />
                     </MudPaper>
                 </MudPaper>
            }
            else
            {
                <MudPaper Class="d-flex mt-4 align-center" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                    <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudDivider FlexItem />
                     </MudPaper>
                     <MudPaper Width="8%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                         <MudText Align="Align.Center" Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.Day @m.TimeSent.ToString("MMMM") @m.TimeSent.Year</MudText>
                        </MudPaper>
                        <MudPaper Width="42%" Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                            <MudDivider FlexItem />
                     </MudPaper>
                 </MudPaper>
            }

        }
        @if (prevSender == m.Author && checkTime(m.TimeSent))
        {

            <MudPaper Elevation="0" class="d-flex flex-grow-1 px-4 align-center" Style="@($"background:{Colors.Shades.Transparent}")">
                <div class="d-flex flex-grow-1 gap-4 align-center">
                    <MudAvatar Style="background-color:unset" Size="Size.Medium"></MudAvatar>
                    <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                        <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                    </MudPaper>
                </div>
            </MudPaper>
        }
        else
        {
            <MudPaper Elevation="0" class="d-flex flex-grow-1 gap-4 px-4 pt-4 mt-2" Style="@($"background:{Colors.Shades.Transparent}")">
                <div class="d-flex flex-grow-1 gap-4">
                    @* Need to implement avatar
            <MudAvatar>
            <MudImage Src="images/mony.jpg"></MudImage>
            </MudAvatar>
            *@
                    <MudAvatar Color="Color.Secondary" Size="Size.Medium">@m.Author?.DisplayName.First()</MudAvatar>
                        <MudPaper Elevation="0" Style="@($"background:{Colors.Shades.Transparent}")">
                            <div class="d-flex flex-grow-1 gap-3">
                                <MudText Color="Color.Primary">@m.Author?.DisplayName </MudText>
                                <MudText Style="@($"color:{Colors.Grey.Default};")">@m.TimeSent.ToString("HH:mm")</MudText>
                            </div>
                            <MudText Typo="Typo.body1">@((MarkupString)m.Content.Replace(Environment.NewLine, "<br />"))</MudText>
                        </MudPaper>
                    </div>
                </MudPaper>
        }

        prevDate = m.TimeSent;
        prevSender = m.Author;
    }

</div>
<MudToolBar Class="d-flex flex-column-reverse flex-grow-0 gap-0 my-5">
    <MudTextField FullWidth @bind-Value="TextValue" Margin="Margin.Dense" Variant="Variant.Filled" OnKeyDown="SendMessage" AutoGrow Placeholder="Message #general" Class="px-5 py-2" Immediate="true" MaxLength="1000" TextUpdateSuppression="false" Style="@($"background:{Color.Dark}")">
    </MudTextField>
        @* <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="SendMessage" ButtonType="ButtonType.Button" /> *@
</MudToolBar>
 @code {
    public string TextValue { get; set; }
    bool checkTime(DateTime dt)
    {
        return (dt.Date == prevDate.Date) && (dt.Hour == prevDate.Hour) && (dt.Minute < prevDate.AddMinutes(1).Minute);
    }

    private async Task SendMessage(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" && prevKey is not "Shift")
        {
            //     TextValue += e.Key;

            //     _js.InvokeVoidAsync("console.log", e.Key);
            // }
            // else if (!(e.Key is "Enter" or "NumppadEnter"))
            // {
            //     TextValue += e.Key;

            //     _js.InvokeVoidAsync("console.log", e.Key);
            // }
            // else
            // {
            if (!string.IsNullOrWhiteSpace(TextValue))
            {
                ChatMessage newmsg = new ChatMessage();
                newmsg.Content = TextValue.Trim();
                newmsg.MessageHolder = chat;
                newmsg.TimeSent = DateTime.Now;
                newmsg.Author = chat.Participants.Where(e => e.Id == 112).First();
                chat.Messages.Add(newmsg);
                _js.InvokeVoidAsync("console.log", newmsg.Content);

                await Task.Delay(50);
                TextValue = string.Empty;
                await InvokeAsync(StateHasChanged);
            }
        }
        prevKey = e.Key;
        _js.InvokeVoidAsync("console.log", e.Key);
    }

    private int currentCount = 0;
    private string prevKey = "";
    private DateTime prevDate = DateTime.MinValue;
    private Account prevSender = new();
    private Chat chat = new();
    protected override async Task OnInitializedAsync()
    {
        chat.Participants = new List<Account>();
        chat.Messages = new List<ChatMessage>();

        chat.Id = 111;
        chat.Participants.Add(new Account() { Id = 112, Name = "John Doe", DisplayName = "TheDoe" });
        chat.Participants.Add(new Account() { Id = 113, Name = "Bob Builder", DisplayName = "BobTheBuilder" });
        chat.Participants.Add(new Account() { Id = 114, Name = "Mary Jane", DisplayName = "MJ" });

        ChatMessage msg = new ChatMessage();
        msg.Content = "First Message sent! Yay";
        msg.MessageHolder = chat;
        msg.TimeSent = DateTime.Now.AddDays(-15).AddHours(-8);
        msg.Author = chat.Participants.Where(e => e.Id == 112).First();
        chat.Messages.Add(msg);

        ChatMessage msg1 = new ChatMessage();
        msg1.Content = "Hey Jom";
        msg1.MessageHolder = chat;
        msg1.TimeSent = DateTime.Now.AddDays(-8).AddHours(-2).AddMinutes(-2).AddSeconds(32);
        msg1.Author = chat.Participants.Where(e => e.Id == 113).First();
        chat.Messages.Add(msg1);

        ChatMessage msg1b = new ChatMessage();
        msg1b.Content = "John o/";
        msg1b.MessageHolder = chat;
        msg1b.TimeSent = DateTime.Now.AddDays(-8).AddHours(-2).AddMinutes(1).AddSeconds(11);
        msg1b.Author = chat.Participants.Where(e => e.Id == 113).First();
        chat.Messages.Add(msg1b);

        ChatMessage msg1c = new ChatMessage();
        msg1c.Content = "xD";
        msg1c.MessageHolder = chat;
        msg1c.TimeSent = DateTime.Now.AddDays(-8).AddHours(-2).AddMinutes(1).AddSeconds(15);
        msg1c.Author = chat.Participants.Where(e => e.Id == 113).First();
        chat.Messages.Add(msg1c);

        ChatMessage msg1d = new ChatMessage();
        msg1d.Content = "Hello Bob";
        msg1d.MessageHolder = chat;
        msg1d.TimeSent = DateTime.Now.AddDays(-8).AddHours(-2).AddMinutes(3).AddSeconds(15);
        msg1d.Author = chat.Participants.Where(e => e.Id == 112).First();
        chat.Messages.Add(msg1d);

        ChatMessage msg2 = new ChatMessage();
        msg2.Content = "Party tonight?";
        msg2.MessageHolder = chat;
        msg2.TimeSent = DateTime.Now.AddDays(-1).AddHours(7).AddMinutes(14);
        msg2.Author = chat.Participants.Where(e => e.Id == 114).First();
        chat.Messages.Add(msg2);

        ChatMessage msg3 = new ChatMessage();
        msg3.Content = "Where are you guys?";
        msg3.MessageHolder = chat;
        msg3.TimeSent = DateTime.Now.AddHours(-3).AddMinutes(14);
        msg3.Author = chat.Participants.Where(e => e.Id == 114).First();
        chat.Messages.Add(msg3);
    }
}