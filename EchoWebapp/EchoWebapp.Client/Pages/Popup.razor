@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.Entities.EchoCore.AccountCore
@using CoreLib.WebAPI
@using MudBlazor
@using System.Net.Http.Headers
@inject Provider.AccountIdContainer AccountContainer
@inject ILocalStorageService LocalStorage



<div style="display: @(Visible ? "block" : "none"); bottom: 0px;  left: 25px; width: 300px; position:fixed; z-index: 2; ">
    <div class="modal-dialog" style="background: var(--mud-palette-surface);">
        <div class="modal-content" style="background: var(--mud-palette-transparent);">
            <div class="modal-header justify-start">
                <MudAvatar>
                    <MudImage Src="https://us.tonies.com/cdn/shop/products/Tonies-PDP-Assets-Nemo-Single.jpg" />
                </MudAvatar>
                <h5 class="modal-title pl-3">@Name</h5>
            </div>
            <div class="modal-body">
                @if (Message != null)
                {
                    <MudText Typo="Typo.button">@((MarkupString)Message.Replace(Environment.NewLine, "<br />"))</MudText>
                    <MudText Typo="Typo.body1">@((MarkupString)Date.Replace(Environment.NewLine, "<br />"))</MudText>
                }

                <!-- Menu doesnt seem to work in our solution. Might be due to rendermode -->
                <!-- Button and div menu does work tho LUL -->
            </div>
            <div class="modal-footer justify-start">
                <MudButton Color="stringToColor.ConvertStringToColor(currentStatus?.IconColor)" @onclick="@(()=>Hover=!Hover)">Status: @currentStatus?.Name</MudButton>
                <div class="modal-content pa-3" style="display: @(Hover ? "block" : "none"); bottom: 126px;  left: 327px; width: 125px; position:fixed; background: var(--mud-palette-surface);">
                    <div class="d-flex flex-column my-2">
                        @foreach (var s in status)
                        {
                            <MudItem>
                                <MudButton @onclick="@(()=>{OnItemSelected.InvokeAsync(s);SwtichStatus(s);})">
                                    <MudIcon Icon="@s.Icon" Color="@stringToColor.ConvertStringToColor(s.IconColor)" />
                                    <MudText Class="ml-2">@s.Name</MudText>
                                </MudButton>
                            </MudItem>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseErrorPopup">Close</button>
            </div>
        </div>
    </div>
</div>


@code {
    public readonly EchoAPI _echoAPI = new();
    public string? Message { get; set; } = "";
    public string? Date { get; set; } = "";
    public string? Name { get; set; } = "";

    public bool Visible { get; set; } = false;
    public bool Hover { get; set; } = false;

    [Parameter]
    public UserFullDTO self { get; set; }

    ActiveActivityStatusDTO? currentStatus;

    /** Get ActiveActivityStatusDTO from DB and populate status **/
    public static List<ActiveActivityStatusDTO> status = new() {
        new ActiveActivityStatusDTO { Icon = Icons.Material.Filled.Circle, IconColor = "Success", Name = "Online", Id = 0, DisplayedContent = "Online" },
        new ActiveActivityStatusDTO { Icon = Icons.Material.Filled.Brightness2, IconColor = "Warning", Name = "Away", Id = 1, DisplayedContent = "Away"},
        new ActiveActivityStatusDTO { Icon = Icons.Material.Filled.RemoveCircle, IconColor = "Error", Name = "Busy", Id = 2, DisplayedContent = "Busy"},
        new ActiveActivityStatusDTO { Icon = Icons.Material.Filled.StopCircle, IconColor = "Dark", Name = "Offline", Id = 3, DisplayedContent = "Offline"},
    };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (self != null)
        {
            if (firstRender)
            {
                currentStatus = self.UserProfile.User.ActiveStatus;
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    /** change to provider **/
    public readonly StringToColor stringToColor = new();

    public async void SwtichStatus(ActiveActivityStatusDTO s)
    {
        currentStatus = s;

        /** Update ActivityStatusId for self (own account/user?) or based on id **/
        // var data = await _echoAPI.UpdateAsync<Account>(acc, new AuthenticationHeaderValue("Bearer", await LocalStorage.GetItemAsStringAsync("Token")));

        Hover = false;
        StateHasChanged();
    }

    public async void ShowPopup(string message, string date, string name)
    {
        Message = message;
        Date = date;
        Name = name;
        Visible = true;
        Console.WriteLine(Visible + " " + Message + " " + Date + " " + Name);
        await InvokeAsync(StateHasChanged);
    }

    public void CloseErrorPopup()
    {
        Visible = false;
        Hover = false;
        Message = "";
        Date = "";
        Name = "";
        StateHasChanged();
    }


    [Parameter]
    public EventCallback<ActiveActivityStatusDTO> OnItemSelected { get; set; }
}