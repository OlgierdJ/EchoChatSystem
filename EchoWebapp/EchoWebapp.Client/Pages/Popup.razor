@using CoreLib.DTO.EchoCore.UserCore
@using CoreLib.DTO.RequestCore.UserCore
@using CoreLib.Entities.EchoCore.AccountCore
@using CoreLib.WebAPI
@using MudBlazor
@using System.Net.Http.Headers
@inject Provider.AccountIdContainer AccountContainer
@inject ILocalStorageService LocalStorage



<div style="display: @(Visible ? "block" : "none"); bottom: 0px;  left: 25px; width: 300px; position:fixed; z-index: 2; ">
    <div class="modal-dialog" style="background: var(--mud-palette-surface);">
        <div class="modal-content" style="background: var(--mud-palette-transparent);">
            <div class="modal-header row pa-1 ma-0" style="height: 250px; width: 300px;">
                <MudPaper Style="@($"background: {(self.UserProfile.BannerColour != null ? self.UserProfile.BannerColour : "#5C23D9")};")" Height="125px" Width="300px">
                    <div>
                        <MudAvatar Style="height:64px; width:64px; position:relative; top:90px; left:15px; border:solid 2px var(--mud-palette-dark);">
                            <MudImage Src="@self.UserProfile.User.ImageIconURL" />
                        </MudAvatar>
                    </div>
                </MudPaper>
                <MudPaper Height="75px" Elevation="0">
                    <div class="row pl-3 mt-4">
                        <h5>@self.UserProfile.User.DisplayName</h5>
                        <p>@self.UserProfile.User.Name</p>
                    </div>
                </MudPaper>
            </div>
            <div class="modal-body">
                @if (Message != null)
                {
                    <MudText Typo="Typo.button">@((MarkupString)Message.Replace(Environment.NewLine, "<br />"))</MudText>
                    <MudText Typo="Typo.body1">@((MarkupString)Date.Replace(Environment.NewLine, "<br />"))</MudText>
                }
            </div>
            <div class="modal-footer justify-start">
                <MudButton Color="stringToColor.ConvertStringToColor(currentStatus?.IconColor)" @onclick="@(()=>Hover=!Hover)">Status: @currentStatus?.Name</MudButton>
                    <div class="modal-content pa-3" style="display: @(Hover ? "block" : "none"); bottom: 126px;  left: 327px; width: 125px; position:fixed; background: var(--mud-palette-surface);">
                        <div class="d-flex flex-column my-2">
                            @foreach (var s in status)
                        {
                            <MudItem>
                                <MudButton @onclick="@(()=>{OnItemSelected.InvokeAsync(s);SwtichStatus(s);})">
                                    <MudIcon Icon="@s.Icon" Color="@stringToColor.ConvertStringToColor(s.IconColor)" />
                                    <MudText Class="ml-2">@s.Name</MudText>
                                    </MudButton>
                                </MudItem>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseErrorPopup">Close</button>
            </div>
        </div>
    </div>
</div>


@code {
    public readonly EchoAPI _echoAPI = new();
    public string? Message { get; set; } = "";
    public string? Date { get; set; } = "";
    public string? Name { get; set; } = "";

    public bool Visible { get; set; } = false;
    public bool Hover { get; set; } = false;

    [Parameter]
    public UserFullDTO self { get; set; }

    ActivityStatusDTO? currentStatus;

    /** Get ActiveActivityStatusDTO from DB and populate status **/


    public static List<ActivityStatusDTO> status = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (self != null)
        {
            if (firstRender)
            {
                currentStatus = new()
                    {
                        Id = self.UserProfile.User.ActiveStatus.Id,
                        Name = self.UserProfile.User.ActiveStatus.Name,
                        Icon = self.UserProfile.User.ActiveStatus.Icon,
                        IconColor = self.UserProfile.User.ActiveStatus.IconColor,
                    };

                status = await _echoAPI.GetListOfStatusAsync();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public readonly StringToColor stringToColor = new();

    public async void SwtichStatus(ActivityStatusDTO s)
    {
        currentStatus = s;

        /** Update ActivityStatusId for self (own account/user?) or based on id **/
        // var data = await _echoAPI.UpdateAsync<Account>(acc, new AuthenticationHeaderValue("Bearer", await LocalStorage.GetItemAsStringAsync("Token")));

        Hover = false;

        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var result = await _echoAPI.SetStatusAsync(token, new SetStatusRequestDTO { Id = s.Id });

        StateHasChanged();
    }

    public async void ShowPopup(string message, string date, string name)
    {
        Message = message;
        Date = date;
        Name = name;
        Visible = true;
        Console.WriteLine(Visible + " " + Message + " " + Date + " " + Name);
        await InvokeAsync(StateHasChanged);
    }

    public void CloseErrorPopup()
    {
        Visible = false;
        Hover = false;
        Message = "";
        Date = "";
        Name = "";
        StateHasChanged();
    }


    [Parameter]
    public EventCallback<ActivityStatusDTO> OnItemSelected { get; set; }
}